%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 13.0.2%%For: (Jay Hilgert) ()%%Title: (BB_gears.eps)%%CreationDate: 9/26/07 7:11 PM%%BoundingBox: -117 -65 608 531%%HiResBoundingBox: -116.5337 -64.5654 607.4434 530.8828%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 0.74902 0.678431 0.670588 0.901961 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 234.5 233.5 234.5 233.5%AI3_TileBox: -54 -122 522 612%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 468 468%AI5_RulerUnits: 6%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -650 732 1 1923 1134 26 0 0 6 75 0 0%AI5_OpenViewLayers: 7%%PageOrigin:0 0%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 108 8%%BeginData: 15658 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD4DFFA8FD04FF52F85252FD74FFA87D2727A8FFFFCF2627F827A8%FD73FF7DF827F8527D7DFD042726AEFFFFFFA8FD6FFF7D272627F826F827%F8272627277DA852F852FD6EFFA8FD0C2726272627F852FD69FF7DA8FFA8%26272627042726270427262704272627262727FD4DFF7D27A827A8FD16FF%A827F852FD062726272627262727272627272726A8FD4BFF52272726F827%27277DFD13FFA852F827F8272627F827F8272752525226270427F8270427%7DFD4AFFA852F8FD0527F87DA8FD13FFFD0927527D7D5252527D52272627%27272652FD49FFA826F827262704272627F851FD13FFA827270427262704%7D522726522727F8527C27F8272627F8522752A8FD38FF7D52FFFF527DFD%07FFA827272627272726FD0427FD14FF5226272627267D52277DFD04FFA8%26527D2726272727F827F8A8FD35FF7DA8A827F852512626FFA8A8FFFFFF%A826272627F8272627F827262727FD13FF27272627F85252267DFD06FFA8%F8525226F8272627F82652FD34FFA8272752272726FD042751F8A8FFFFFF%7D26FD0927F8A8FD12FF7DFD05277C2752FD08FFA8267DFD0627F87DFD34%FFA8F827F82726272627F827F8277DFFFFFF272726270427262704272627%52FD10FF7D2727F8272627277DF8A8FD09FF275252F827262727A8FD33FF%7D7D5127262727512752FD05275252A8FF7C26272727262727272627277D%FD10FF51272727262727525251FD0AFF5252522726272652FD34FF27F827%F8272752527D7D7D27272627F8F827FFA826F8272627F8272627F851FD11%FF52F8272627F827275227FD0AFF522752F827F82752FD34FF7DFD042752%A8FD05FF52522727F87DFFFF522DFD0627265152FD11FF522726FD042752%5227CFFD09FF277C52FD042752A8FD32FFA852F8272752A8FD07FF515126%2752FFFFFF5226F827F827F8F87DFD13FFA87DF8270427267DF87DFD08FF%A826522726270427F8277DFD30FFA82726272752A8FD08FFA8FD0427F8A8%FFA8A77C2652F87D7DFFFFFFA87D7DFD0FFFA827272726275252F8FD08FF%51277DF82727272627F852FD30FFA82727F82727FD0AFF522727F827A8FF%FFFFA8A8FFA8FD05FF52F8F852FD0FFF51272627F8275251F8A8FD04FFA8%27F87D2727F8272627F8267DFD32FF2727277DFD0AFF52522627A8FD0DFF%2727F852FD0EFFA852FD06277D52F852527D5227277DFD07275127FD32FF%5227F82751FD0AFF522727F87DA8FD05FFA8A8FD04FF7D27262752FD0DFF%A827F82726270427F827527D512D2752527D27272627042727A8A8FD32FF%A826F8272752A8FD09FF51272627F8A8FD04FFA827277CA8FF5227262726%52A8FD0DFF27272627272726FD042752527D525226FD0527F8A8FD35FF52%27F827277DFD08FF52272627277CA8FD04FF51F827F8272627F827F827F8%277DFFA8A77DFD08FFA8F8262627F827F8272627F827F827F8272627F827%F827A8FD36FF7D27275127A8FD06FF7D522727F8A7FD06FF7C2727272627%272726272727262727272627A8FD08FF7D7DFF7D2726FD0F27F852FD36FF%52F827262D277DA8FFCFA8522D2727262627FD07FF512726272627F82726%272627F8272627F852FD0CFF7D27F82726270427262704272627F8272626%27FD36FF522726272751275251522752272726272752FD08FFFD0427267D%FFFF7C272727262704277DFFFFFF7DA852A87DFD04FFA826272727042726%272727262752A8272627FFFFA87DFD34FFA87DF827F827262727270427F8%277DFFA8FD08FF52F827F87DFD04FF52272627F852A8FFFFA85227F827F8%277DA8FFFF52F8F82726522727F827F8277DFFFFFF7DFFFFFF27F87DFFFF%FF527DFD2FFFA827262726FD05272627F8A8FD0AFFFD0427A8FD04FFA827%272652FD04FF7D0452A8A8A82727A8FFFFFF5227F8A8FFFFA8FD0427FFFF%FF7DA8FFFFFF27F87CFFFF522627FD30FF517D7D27F8272627047D7D52A8%FD09FFA827F82726A8FD04FF7D27262752FFFFFF7D2652FD05FF2751A7FF%FFFFA87DFD04FF27272652FFFFA826F8A8A87DF82727525127F852FD33FF%51277DA82652FD0CFF7D272727262752FD04FF52F827F87DFFFFFF7D27FD%06FF7DF8FD0BFFA8FD05FF27272651262726272627262751FFFFFF7DFD30%FFA8FFFFA8A8FD0BFF52F8F8272627F82752A87D52F827F82727FFFFFF27%52FD06FFA82752FD10FF7CF827F827F827F827F827F827275204F852FD3A%FF7DFD04FF52F827272726272727262726FD052752FFFF5227FD06FFA826%A8FD04FF7D7DA8FD05FFA8FFFFFF27272627277DA7FFA87DFD0427F82727%A8FD39FF27F852FFFFFF7D2726525227F8272627F8272627F827260452FF%7D27A8FD05FF52277DFFFFA8275127277DFD04FF5226522727262752FD07%FF7D27F827F87DFD39FFA827F851FD05FFA8FFFFA82726272727F8275152%F827F858FFCF2651A8FFFFFF7D267CFFFFFF5252FFFF7C52A8FFFFFF2727%262726277DFD09FFA827272752FD32FFA85226A8FFFFFF7DF827F8FD04FF%A8277DFFFFA827F827F8527DFFA87D2627A8FFA8A8F8272D7C27F852A8FF%FFA827A8FFFFFF27A8FD04FF2727262652FD0BFF7D27F8277DA8A8FD2FFF%A8F82727A8FFA8FD042752A8FF7D2627F8FFFFFFFD0427A8FD0AFFA87D52%27527DFD05FF517DFFFFA827A8FD04FFA8262727FD0DFF51272727F827A8%FD2EFFA827F8272727F82726270427F827F827F852FFFFFF51F82727FD0D%FFA8FFA8FD06FF7D277D7D277CFD05FF5227F87CFD0DFF7DF827F82727FD%30FF52272727262726272727262726272627A8FFFFFF5226F87DFD0EFFCF%A8FD07FFA752517DFFFFFFA87D522726277DFD0DFFA82726277DFD31FFA7%F827F827F826F827F826F827262726FD05FF7DA7A8FD0EFF52F87DFD04FF%7DA8FFFFA8FD04FFA8F826F827F8A8FD0DFFA8F82727FD32FFFD04272627%52A8837D52272627272752FD15FF272727FFFFFF7D2627FD07FFA87DFD04%277DFD0DFFA8272651A8FD2CFF7D52527D51272627F852A8FD05FF7D2DF8%27F8277D7D587DA8FD0AFF7D267DFFFFA827F8277DA87D27F851FD0AFF52%26F87DFD0DFF7DF827F8277DFD2BFF52F82726272727F87DFD08FFA85126%2726272627F8A8FD0AFF5127267D7D52272726272627262752FD0AFFA826%2727FD0DFF52272627F827A8FD2AFF5204F8272627F851FD0AFF7D270427%F827F8F87CFD0AFF7DF827F826F8272627F8270427F8277DFFA85252FD05%FF522704267DFD0BFF7D27F827525252FD2CFF7DFD05277DFD0BFF522727%2726517DFD0BFFA8FD0F27522DF827A8FFFFFF522726272627A8FD09FFA8%52262752FD30FFA8272627F8A8FD0BFF7DF827F852FD0AFFA8FFFF7DF827%2627042726270427262704272627F82751FFFFFFA827F8512727F8277DFD%07FFA827F827F87DFD31FFFD0427A8FD0BFF7D27272752FD09FF2D27527D%262726272727262727272627272726FD0427FD05FFA8A8FFA82727F82752%A8A8FFCFA852272627F82727FD31FF27F82726CFFD0BFF7DF827F87CFD08%FFA827F827F8272627F8272627F827F827F8272627F827F827A8FD08FF7C%F827F827F8272727F826F8272627F8F87CFD2EFFA87CFD042783FD0BFF52%FD0427A7FD08FFA82726FD0727F8272727F8FD0727F87DFD08FF27272627%2627262726FD0427A8FFA751A8FD2DFF5227F8270427F852FD0AFFA827F8%272627F852A8FD07FFA827F82726270427F8527DFFA8A827272627042726%2726512752A8FFFFFF7D26F87D7D522627F8272727F87CFD32FF27F82726%27272726A8FD09FF7C262726272627F87DFD07FFA8272726272727F87DFD%06FFFD0427262727270427F8FD05FF52A8FFFFA827F852A8FF512651FD32%FF582727522727F82726A8FD07FF58F827262727272627A8FD07FF522726%27F827F827A8FD06FFA8F8272627F827262727A8FD0AFFF8F87DFFFFA8F8%7DFD36FFA8F8272727267DA8FFFFFFA852F8FD0427FFFFFFA8FD05FFA852%FD082752FD08FF52FD062752FD0CFF7D52FD3DFF7DF8272627F827275127%27F827042727A8FD09FF7DF827F82726270427F87DFD08FF522726270427%F87DFD10FFA8FFA8FD38FF7D272627272726272627262727272627A8FD09%FFA87D272726272727262752FD08FF52F8272727262752FD0FFF7D272651%FD37FFA827F827F827F827F8272627F827F827F87DFD0CFF5226F8272627%F827A8FD06FFA8F827F8272627F82727A8FD0DFF52F827F87DFD07FFA827%7DA8FD2BFF7DF827F87D7D52FD05277D7D51F82727FD0DFF26FD0527267C%FD06FFFD0827262726FD0DFFFD042751FD07FF2727F851AEFD2AFF7D27F8%7DFFFFFF7CF82726A8FFFFA827F852FD0CFFA727F82726270427F8527DFF%A87D272726270427262726512752A8FFFFFF7DFD07FFA8272627F827A8FD%05FF2727262726FD2CFFA8A8FD04FF7D270452FD04FFA87DA8FD0BFF7D27%272726272727262726272727F8FD05272627F87DFD06FF522751FD06FFAE%26272727F87DFD04FF7D2726272652FD32FFA8F8F852FD11FFA827F827F8%27F8272627F8270427F8272627F8272627F827A8FD05FF2726F82627FD05%FF7D27F8272627265127525227F827F8272DFD24FF52277DFD0CFF7D52CF%FD09FF7D52FF51A8FD04FF5252527D26FD1227FD06FF7DF8FD0427FFFFA7%51FD07272627F8FD0527047DFD1CFFA82752A8FFFFFFA827F852FD04FFA8%A7A8FD0EFFA8527DFD05275252FFFFFFA8FFFF7DF8272627042726270427%262704272626F82752FD05FF7D27262726272727F8272627042726270427%262704272627042752FD07FFA8FD14FF7D26F87DFFFFFF7DF82727FD04FF%52F852FD0EFF7D2652FD04FFA82727FD06FFA82726272727262727272627%2727F8275227F827A8FD05FFFD0627262726272727262727272627272726%27272726277CFD04FFA852277DFD13FFA7F827F8A8A87D272704277DFFFF%7DF82727FD0CFFA827277DFD07FF522752FD04FF7DF827F827F827F82726%27F827F8277DFFA85252FD06FF52F8272627F8272627F8272627F8272627%F8272627F8272627F82627A8A852F826F8277CFD0DFFA8FD04FFA7FD0527%F8FD06275227272652FD0DFF277DFD09FF2752FD04FF272726A8A752FD04%272627272752FD0BFFA7FD1D2726272727F852FD0CFF52F852A8FFA852F8%270427262704272627F827F827262752FD05FFA8FD06FF7D27FD0AFFA827%CFFFFFFF7D27A8FFFFFF27F8277DFF7D27F852FD0BFF52F8272627042726%270427262704272627042726270427262704272627F8272627F827A8FD0C%FF2727F8525227F827272726272627F82726272627272726517DFFA87D27%52FD05FFCFF87DFD0BFF2727FD09FF272727FFFFFF522651FFFFFFA8A8A8%FD04FF52F827262727272627272726272727262727272627272726272727%26272727262727277DFD0DFF7DF827F827F827F827F8272752527C525227%27F8272627F8275227F827F8A8FD05FF5252FD0BFF51A7FD09FF52F87DFD%04FF7CA8FFFFFF52F827277DA87DF8272627F8272627F8272627F8272627%F8272627F8272627F8272627F8272627F82727FD0EFFA827262727272627%277DA8FD07FFA87D2727262727272627047CFD06FF517DFD0BFF527DFD14%FFA826272627262726FD2227FD10FF27270427F82758FD0DFF5227F82726%27F827A8FD05FFA82752FD0BFF2752FD14FF522626270427262704272627%04272627042726270427262704272627042726270427262704272627F827%A8FD0AFF7DA8FFFF2D272727F852A8FD0FFFA827F827272752FD07FFA852%A8FD09FF7D52FD16FF522727272627272726272727262727272627272726%27272726272727262727272627272726272727F852FD09FF52F8F8522727%F827F852A8FD11FFA827F82726277DFD06FFA8F852FD08FFA82627FD17FF%27262627F8272627F8272627F8272627F8272627F8272627F8272627F827%2627F8272627F8272627F8A8FD08FF7CF827262727272652FD14FFA85226%2726517D7D527DFFFFA8A8277CFD06FFA85252A8FD18FF52FD28277D7DA8%7DA8FD04FF52F8272627F827A8FD15FFA8272627F827F826F8A8FFFFFFA8%F8277CA8A8A8522727FFFFFFA8A8A8FD15FF272704272627042726270427%26270427262704272627042726270427262704272627042726272627F827%F827F87DFD04FF52F82727277DFD17FF522727272627F827A8FFFFFFA8A8%A727F852F8527DA8FFFFFF7DF827A8FD13FFA82727272627272726272727%262727272627272726272727262727272627272726272727262727272627%2727262727FD04FF5226F82727FD19FF27272627F852A8FD07FF7DA8FF7D%A8FD05FF2727F8A8FD13FFA7F8272627F8272627F8272627F8272627F827%2627F8272627F8272627F8272627F8272627F8272627F8272627F827FD04%FF51262726A8FD19FF7DF8272652FD0BFFA852FD06FF2727277DFD05FFA8%7DFD0CFF7DFD2B27F852A8A8A87D7D2627F827A8FD19FFA827262727FD0A%FFA8F82627FFFFA87D52F827F82752A8FFFF7D27F852FD08FFA8FF7D51F8%272627042726270427262704272627042726270427262704272627042726%270427262704272627F827277DFFFF522727F827272752FD1BFFFD04277D%FD09FFA827262727522627262726272627F8525227262752FD06FFA85252%262727272627272726272727262727272627272726272727262727272627%27272627272726272727262727277DFD04FFF827F827F827F87DFD1BFF52%F827F827527DA8FD07FF5226F827F827F8270427F8272627F8272627F8A8%FD05FFA8F826F827F8272627F8272627F8272627F8272627F8272627F827%2627F8272627F8272627F8272627F8272627F827F8A8FD04FFA851272627%27277DFD1BFF7D2727272627F851FD07FFA8F8FD0527F8272727F8FD0527%F87DFD06FFA8FD2F27A8FD06FF7D27F82704A8FD1BFF7DF8272627F82627%FD07FF52270427F827277D7DA87D7D5127F827262727A8FD05FFA8F827F8%270427262704272627042726270427262704272627042726270427262704%2726270427262704272627042726A8FD07FF52272627A8FD1BFF7D272627%27527DFD07FF52272727F8277DFD07FFA852F8FD0427FD06FFA852522727%262727272627272726272727262727272627272726272727262727272627%2727262727272627272726277DFD07FF52F827F8A8FD1BFF7DF827F87DFD%05FFA8A8FFA827F827F827A8FD0AFF52F82726F852FD07FFA8A87D27F827%2627F8272627F8272627F8272627F8272627F8272627F8272627F8272627%F8272627F8272627F82752FD06FF512727277DFD1BFF522727277DFD04FF%A8F827272726272727A8FD0CFF5226FD042751277DFD06FF58FD2C27A8FF%A852F8272627F852FD1BFF52F827F8A8FD04FF52F8F8272627F8277DFD0D%FFA8270427F827F826F8FD06FF7DF8272627042726270427262704272627%04272627042726270427262704272627042726270427262704272627F852%52F82726FD0427FD1BFF26FD0427A8FD04FF522726FD0427FD0FFF7C2727%272627277DFD06FFA8272627272726272727262727272627272726272727%262727272627272726272727262727272627272726FD04275226F827F827%26267DFD19FF5226F8272627F87DFD04FF7D27F827F87DFD0FFFA8F82726%2752FD09FF2727F8272627F8272627F8272627F8272627F8272627F82726%27F8272627F8272627F8272627F827F826F827F87CFFA8A8A8522627F852%FD19FF2D26272727262726FD05FF522727277DFD10FF52272727FD09FF52%FD28277C52585252A8FD04FFA8272627F8A8FD17FF7DF827F8275152277D%FD05FF51F82726A8FD10FF27272627A7FD07FF2727262704272627042726%2704272627042726270427262704272627042726270427262704272627F8%7DFD0BFF52FD0427FD16FFA82627272752FD09FF51272627A8FD10FF52F8%2727A8FD06FF272726272727262727272627272726272727262727272627%272726272727262727272627272726272651FD0BFFA827F827262627FD15%FF2727F82727FD0AFF52F827F8A8FD10FF2727F827A8FD05FF52262627F8%272627F8272627F8272627F8272627F8272627F8272627F8272627F82726%27F8272627F8277DFD0AFFA82704FD052752FD13FF51FD042752FD08FFA8%7DFD042752FD0FFFA8FD042752A8FD04FFA804272627262726FD2227FD0B%FF52F827F8270427F82751FD10FFA8272726270427F87CFD06FF7D27F827%2627F827A8FD0EFF7CF8270427F8277DFD04FF51F827277D7D52F8272627%04272627042726270427262704272627042726270427262704272627F827%52FD0AFF7D27277C7D522627262727A8FD0CFFCF7DFD04272627262726A8%FD05FF7DF827F8272727F87DFD0DFFA826272727F827F827FD04FFA8A8A8%FD04FF51F827272726272727262727272627272726272727262727272627%2727262727272627A8FD0AFFA8FFFFFFA827F827F827F8277CA8FD06FFA8%A85227F8272627F8527D27F8F87DFD05FF7D52515227272627F8A8FD0CFF%2727F8272752272752FD0BFFA827F8272627F8272627F8272627F8272627%F8272627F8272627F8272627F8272627F852FD0FFF7DFD05272627275252%7D7C7D52522727262727272652FFFFA87D52FD0BFFFD0527A8FD0AFF5127%2727F8A8FD10FF7DFD1B2726FD052726A8FD0EFF52F827F82726270427F8%26F827F826F8272627F8272627A8FD10FFA7F8272627F852A8FD05FFA87D%27272627F852FD11FF52F827262704272627042726270427262704272627%04272627F82727A87D27F827042652FD0DFFA8F827F85252272627262727%272627272726270427262704A7FD11FF7D26272727F827527D7D7D525204%2727272652A8FD11FF272726272727262727272627272726272727262727%272627272751FFFFFFA87D272652FD0EFF7DF8F852FFFFA852F827F827F8%26F8272627277D7D27F82752FD11FF7D272627F827F826F827F826F82726%27F82752FD11FF7C262627F8272727F8272627F8272627F8272627F82726%27F82752FD06FFA87DFD10FF7D7DFD04FF7C2727277C7D5251272727FFFF%FFA827F87CFD11FF522627F82726FD0927F8272727A8FD10FF5226FD0427%A8A87DFD0A2704FD0527F87DFD1EFF7DF82627FFFFFF5227F852FD04FF7D%7DA8FD10FFA7F827F8527D51F82604272627F827527DF827F87DFD10FF27%27262627FD05FF5227F8272627F827275251272627042752FD1EFF7DF826%A8FFFFFFA8F82652FD17FFA827F87DFFFFFFA85227262752A8A8FFFFA826%277DFD11FF272752FD06FFA827272627F87DFD04FF52272727F852FD1EFF%A8527DFD05FF5227A8FD18FFA8A8FD06FF2627F8A8FD05FFA87DFD13FF7D%FD07FFA827F827F827A8FD04FFA8F827262627FD49FF52F827A8FD23FFFD%042752FD06FFA80427F852FD49FF522651FD23FFA827F827F8A8FD07FF52%2652A8FD4AFFA8FD25FF5227F852FD08FFA8FD74FFA8A8A8FD1AFFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp6 Bn%AI5_BeginGradient: (Linear Gradient 1)(Linear Gradient 1) 0 2 Bd[<00000001020304050506070809090A0B0C0D0F10111213141516171818191A1B1C1C1D1F2021222324252627292A2A2B2D2E2F30323334353637383A3B3C3D3E3F40424344454647484A4B4C4D4E4F5152535455565658595B5C5D5F6061626364666768696A6B6C6D6E6F6F707172737475767778797A7B7C7D7E7F7F8081828383848586878788898A8B8C8B8C8D8E8E8F90909192939494959696979898999A9A9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAABABAAAAABABABABACACACACADADADADAEAEAEAFAFAFB0B0B0B1B1B1B2B2><00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141516171818191A1B1C1D1D1E1F202122222324262728292A2B2C2D2E2E2F30313233343536373838393A3B3C3D3E3F4041434445464648494A4C4D4E4F505152535455565758595A5A5B5C5D5E5F60616263646465666768696A6B6C6C6D6E6F6F70717272737475767778797A7B7C7C7D7E7F808081828383848586878788898A8A8B8C8D8E8E8F8F9090919292939494959696979899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A2A2A3A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9A9AAAAAAABABABACACAC><00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141515161718191A1B1B1C1D1E1F20202122232425262728292A2B2C2D2E2F30313233343536373738393A3B3C3D3E3F404142434445464748494A4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061616161626364656566676869696A6B6B6C6D6E6E6F70717172737474757677777879797A7B7C7C7D7E7F7F8081818283838485858686878888898A8B8B8C8D8D8E8E8F8F90909191929293939494959596969797989899999A9A9B9B9C9C9C9D9D9E9E9E9F9F9FA0A0A1A1A1A1A2A2A2A3A3><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101020202020203030304040505060606070708090A0A0B0C0D0E0F0F101112131415161718191A1B1D1E1F20212324252728292B2C2E2F303233353637393B3C3E4041434546484A4B4D4F51525456585A5C5E5F61636567696B6D6F717375777A7C7E80828587898B8E90929497999B9DA0A2A4A6A8ABADAFB1B3B5B7B9BBBD><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959493929190908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423222120>4 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Linear Gradient 2)(Linear Gradient 2) 0 6 Bd[<C5C5C5C5C6C6C7C7C8C8C8C8C9C9C9CACBCBCCCCCCCCCCCCCDCDCECECFCFD0D0D1D1D1D1D1D2D2D2D3D3D3D4D4D4D4D4D4D5D5D5D5D5D6D6D6D6D7D6D7D7D7D7D7D8D8D8D9D9D9DAD9DADADADADADADADADADBDBDADBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDCDBDBDBDBDBDBDADBDBDADBDADADADADADADADADADADAD9D9D9D9D8D8D8D8D8D7D7D7D7D7D7D6D6D6D6D6D6><3032343436383A3B3D3F3F4143444648494B4D4F4F51535557595B5C5E6062646567686A6C6E70727476787A7D7F81838587898B8D8D8E9092949597999A9C9E9FA1A2A3A5A6A8A9ABACAEAFB0B1B2B3B4B5B6B7B7B8B9BABBBCBDBEBFC0C0C1C2C2C3C4C4C5C6C7C7C8C9C9C9CACACBCCCCCDCDCECECFCFCFD0D0D0D1D1D1D2D2D2D3D3D4D3D4D4D4D5D5D5D6D6D6D6D6D6D6D6D6D7D7><232120201F1E1C1B18171716141312100F0E0D0C0C09080706050402010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>0<0000010101020203030304040505060606070708080809090A0A0B0B0B0C0C0D0D0E0E0E0F0F10101111111212131314141415151616171718181819191A1A1B1B1C1C1C1D1D1E1E1F1F20202021212222232324242425252626272728282829292A2A2B2B2C2C2D2D2D2E2E2F2F303031313232323333343435353636373737383839393A3A3B3B3C3C3C3D3D3E3E3F3F404041414242><A09F9E9E9D9C9B9A99989897969594939291908F8F8E8D8C8B8A89888786858483828281807F7E7D7C7B7A79787776757473727170706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756555453525251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110><C6C6C6C6C6C6C6C6C7C7C7C7C7C7C7C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9C9C9C9C9C9C9C9CACACACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCCCCCCCCCCCDCDCDCDCDCDCDCDCDCDCDCDCECECECECECECECECECECECECFCFCFCFCFCFCFCFCFCFCFCFD0D0D0D0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D1D2D2D2D2D2D2>4 %_Br<8282828383838384848485858586868686878787878788888989898A8A8A8B8B8C8C8C8D8D8D8D8E8E8E8F8F8F8F90909091919292939394949595959696969697979898989899999A9A9A9A9B9B9C9C9C9C9D9D9E9E9E9E9F9E9F9FA0A0A0A1A1A1A2A2A2A2A3A3A3A4A4A5A5A5A6A6A6A7A7A8A8A8A9A9AAAAAAAAABABABABACACACADADADADADAEAEAFAFB0B0B0B1B1B2B2B3B3B4B4B4B5B5B6B6B7B7B7B9B8B9B9BABABBBBBBBCBCBDBDBDBDBEBEBFBFBFBFBFC0C0C0C0C1C1C1C1C1C1C1C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3C3C3C4C3C4C4C4C4C4C4C5C5C5C5C5C5C5C5><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010203030405060608080A0A0B0C0C0E0E101012121313161618181A1B1B1C1C1E1E2020232325252828292A2B2C2E2E3030><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFCFBFAF9F9F7F5F4F1F1F0EEEDECEBEBEBEAE8E7E6E6E4E2E1DFDDDCDBDAD9D8D7D6D5D5D3D2D1D0CECDCBCBCAC8C7C6C5C4C3C2C2C0BFBEBCBBBAB8B7B5B5B4B2B1B0AEADACAAA9A7A6A6A4A3A1A09E9C9A9997959492908E8E8C8A88868582817E7D7A79767572706F6C6A6866646462605D5C59575553514E4D4A484644413F3C3A373633312E2C29282523>0<737373727272727171717070706F6F6F6E6E6E6D6D6D6C6C6B6B6B6A6A6A69696868686767666665656564646363626262616160605F5F5E5E5D5D5C5C5C5B5B5A5A59595858575756565555545453535252515150504F4F4E4E4D4D4C4C4B4B4A4A494948484747464545444443434242414140403F3E3E3D3D3C3C3B3B3A3A39383837373636353534333332323131302F2F2E2E2D2D2C2B2B2A2A29292827272626252424232322222120201F1F1E1D1D1C1C1B1A1A191918171716161514141313121111100F0F0E0E0D0C0C0B0B0A09090807070606050404030302010100><F8F8F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F3F3F3F3F2F2F2F1F1F1F0F0F0F0EFEFEFEEEEEEEDEDEDECECECEBEBEBEAEAEAE9E9E9E8E8E7E7E7E6E6E6E5E5E5E4E4E4E3E3E2E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDCDBDBDADADAD9D9D8D8D8D7D7D6D6D6D5D5D4D4D4D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCCCCCCCBCBCACAC9C9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C3C2C2C1C1C0C0BFBFBFBEBEBDBDBCBCBBBBBBBABAB9B9B8B8B7B7B6B6B6B5B5B4B4B3B3B2B2B1B1B1B0B0AFAFAEAEADADACACABABAAAAAAA9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A0><0F0F10101011111212131314141515161617171819191A1A1B1C1C1D1D1E1F1F2021212223232425252627272829292A2B2C2C2D2E2E2F303131323334343536373738393A3A3B3C3D3D3E3F404141424344454546474849494A4B4C4D4D4E4F5051525253545556575758595A5B5C5D5D5E5F60616263636465666768696A6A6B6C6D6E6F70717272737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919293949495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6>4 %_Br<0001030405050608090A0B0D0E0F111213151618191A1C1D1E1F202123242627282A2B2C2D2F303132343536373838393B3C3D3E3F4141434445464748494A4B4C4D4F4F51525353535455565758595A5B5C5C5D5E5F60616162626364656667676869696A6A6B6B6C6D6D6E6F7070707172737374757575757576767778787879797A7B7B7B7C7C7D7D7D7D7E7E7F80808081818182828282><444341413F3E3E3C3C3A3939373634343232312F2E2C2C2B292927262624232120201E1D1B1B1A18181515141212100F0F0C0C0B0909060606040402020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>10<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBABAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAAAA9A8A7A6A5A4A3A2A1A09F9E9E9D9C9B9A99989796959594939291908F8E8D8D8C8B8A8988878786858483828281807F7E7D7D7C7B7A79797877767675747473><BFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C6C6C6C7C7C8C8C8C9C9CACACACBCBCCCCCCCDCDCECECECFCFD0D0D0D1D1D2D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDCDDDDDEDEDEDFDFE0E0E0E1E1E1E2E2E3E3E3E4E4E4E5E5E6E6E6E7E7E7E8E8E9E9E9EAEAEAEBEBEBECECECEDEDEEEEEEEFEFEFF0F0F0F1F1F1F2F2F2F3F3F3F4F4F4F5F5F5F6F6F6F7F7F7F7F8F8><00000000000101010101010101010102020202020202020203030303030303030304040404040404040404050505050505050505050606060606060606060707070707070707070708080808080808080808090909090909090909090A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F>4 %_Br0<9E9D9B999896959392908F8E8C8B8A88878684838181807E7D7B7A79777675737272706F6D6C6B6A6A68676564626261605E5D5D5C5A595757565555535251514F4E4E4D4B4B4A4A4848474745454444>101<7F808182838485868788898A8B8C8D8E8F90919293939495969798999A9B9C9D9E9E9FA0A1A2A3A4A4A5A6A7A8A9A9AAABACADADAEAFB0B1B1B2B3B3B4B5B6B6B7B8B8B9BABABBBBBCBCBDBDBEBEBFBF>04 %_Br0<FDFDFDFDFDFCFCFCFCFCFBFBFBFBFBFAFAFAFAFAF9F9F9F8F8F8F7F7F6F6F5F5F5F5F4F4F3F3F2F2F1F1F0F0EFEFEFEEEEEDEDECECECEBEBEAE9E9E9E8E7E7E7E6E6E5E5E4E3E3E3E2E1E0E0E0DFDEDEDDDDDCDCDBDADAD9D8D8D7D7D6D6D5D4D4D3D2D2D1D1D0CFCFCECDCDCCCCCBCACAC9C9C8C7C7C6C6C5C5C4C3C3C2C2C1C1C0C0BEBEBDBDBCBCBBBBBABAB9B9B7B7B6B6B5B5B3B3B3B2B2B1B1B1B0B0AEAEAEADADACACACABABABAAAAAAA9A9A9A8A8A8A6A6A6A6A5A5A5A5A4A4A4A4A2A2A2A2A2A1A1A1A1A19F9F9F9F9F9F9F9F9E9E9E9E9E9E9E9E9E>101<000102030405060708090A0B0C0D0E0F10111112131415161718191A1B1C1D1D1E1F20212223242425262728292A2A2B2C2D2E2F2F3031323334343536373838393A3B3B3C3D3E3E3F40414142434444454647474849494A4B4B4C4D4E4E4F505051525253535455555657575858595A5A5B5B5C5D5D5E5E5F5F606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6E6F6F70707071717272727373747474757575767676777777787878797979797A7A7A7A7B7B7B7B7C7C7C7C7C7D7D7D7D7D7E7E7E7E7E7E7E7E7F7F7F7F7F7F7F7F7F>04 %_Br[0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 %_BS%_0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 Bs0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 %_BS%_0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 Bs0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 %_BS%_0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 Bs0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 %_BS%_0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 Bs0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 %_BS%_0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 Bs0 0.992157 1 0 1 0 0 2 33.3333 0 %_BS%_0 0.992157 1 0 1 0 0 2 33.3333 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Midday Sky)(Midday Sky) 0 3 Bd[<BBBCBCBDBEBFC0C0C1C2C2C3C3C4C5C5C6C7C7C8C8C8C9C9CACBCBCCCCCDCDCECECFCFD0D0D1D1D2D2D2D3D3D4D4D5D5D6D6D7D7D7D8D8D9D9DADBDBDCDCDCDDDDDDDEDEDEDFDFDFE0E0E1E1E2E2E3E3E3E4E4E5E5E6E6E7E7E8E8E8E9E9E9EAEAEAEBEBEBECECEDEDEDEDEEEEEFEFF0F0F0><6A6C6D6F707173747677797A7B7D7E8081828384858788898A8B8D8E8F90919294959697989A9B9C9D9FA0A1A2A3A4A5A6A7A8A9AAABACADAFB1B2B3B4B5B5B6B7B8B9BABBBBBCBDBEBFC0C0C2C3C3C4C5C6C7C8C8C9C9CBCCCCCDCECFCFD0D1D2D2D3D4D5D6D6D7D7D8D9DADADBDBDCDDDE>000.011765<8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A5958575654535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C><FFFEFEFDFDFCFCFBFBFAFAF9F9F8F7F7F6F6F5F5F4F4F3F3F2F2F1F0F0EFEFEEEEEDEDECECEBEAEAE9E9E8E8E7E7E6E6E5E5E4E3E3E2E2E1E1E0E0DFDFDEDEDDDCDCDBDBDADAD9D9D8D8D7D7D6D5D5D4D4D3D3D2D2D1D1D0CFCFCECECDCDCCCCCBCBCACAC9C8C8C7C7C6C6C5C5C4C4C3C3C2>4 %_Br<15161718191A1B1C1D1E1F20212223242526272829292A2B2C2D2E2F2F30313233343536373738393A3B3C3C3D3E3F40414243444445464748494A4B4C4D4D4E4F5050515253545555565758595A5B5C5C5D5E5F606061626364646566676869696A6B6B6C6D6E6F6F707171727374757676777878797A7B7C7C7D7E7F8080818282838485858686878889898A8B8C8D8D8E8F8F909192929394959697979898999A9A9B9B9C9C9D9D9E9F9FA0A1A1A2A2A2A3A4A4A5A6A6A7A7A8A8A9A9A9AAAAABACACADAEAEAFAFAFB0B0B1B2B2B2B3B3B4B4B5B5B5B6B6B7B7B8B8B9B9BABABBBB><00000000000000000000000001010001010201020202020302030302030303030404040405050405050505060607060707080707080708080808090809090A0A090B0A0C0B0D0C0E0D0F0E100F0F1010111012111312131313141415141615171618171918181A191B1A1B1B1C1C1D1D1E1E1E1F1F202021212222232324242425252626282729292A2A2B2B2B2C2C2D2D2F2E303032313133333535373738383A393B3B3B3C3C3E3E3F3F414143424444444646474749494A4A4C4C4D4D4D4F4F51515252545456565658585A595B5B5D5D5E5E606060626263636565676769696A6A>00<E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403><F6F6F5F5F4F4F3F3F2F2F1F1F0F0F0EFEFEEEEEDEDECECEBEBEAEAEAE9E9E8E8E7E7E6E6E5E5E5E4E4E3E3E2E2E1E1E0E0DFDFDFDEDEDDDDDCDCDBDBDADAD9D9D9D8D8D7D7D6D6D5D5D4D4D3D3D3D2D2D1D1D0D0CFCFCECECECDCDCCCCCBCBCACAC9C9C8C8C8C7C7C6C6C5C5C4C4C3C3C2C2C2C1C1C0C0BFBFBEBEBDBDBCBCBCBBBBBABAB9B9B8B8B7B7B6B6B6B5B5B4B4B3B3B2B2B1B1B1B0B0AFAFAEAEADADACACABABABAAAAA9A9A8A8A7A7A6A6A5A5A5A4A4A3A3A2A2A1A1A0A09F9F9F9E9E9D9D9C9C9B9B9A9A9A9999989897979696959594949493939292919190908F8F8E8E>14 %_Br[0.941176 0.870588 0 0 0.011765 0.109804 0.760784 2 50 100 %_BS%_0.941176 0.870588 0 0 0.011765 0.109804 0.760784 2 50 100 Bs0.733333 0.415686 0 0 0.011765 0.556863 1 2 50 50 %_BS%_0.733333 0.415686 0 0 0.011765 0.556863 1 2 50 50 Bs0.082353 0 0 0 0.898039 0.964706 1 2 50 0 %_BS%_0.082353 0 0 0 0.898039 0.964706 1 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Radial Gradient 1)(Radial Gradient 1) 1 2 Bd[<00000001020304050506070809090A0B0C0D0F10111213141516171818191A1B1C1C1D1F2021222324252627292A2A2B2D2E2F30323334353637383A3B3C3D3E3F40424344454647484A4B4C4D4E4F5152535455565658595B5C5D5F6061626364666768696A6B6C6D6E6F6F707172737475767778797A7B7C7D7E7F7F8081828383848586878788898A8B8C8B8C8D8E8E8F90909192939494959696979898999A9A9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAABABAAAAABABABABACACACACADADADADAEAEAEAFAFAFB0B0B0B1B1B1B2B2><00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141516171818191A1B1C1D1D1E1F202122222324262728292A2B2C2D2E2E2F30313233343536373838393A3B3C3D3E3F4041434445464648494A4C4D4E4F505152535455565758595A5A5B5C5D5E5F60616263646465666768696A6B6C6C6D6E6F6F70717272737475767778797A7B7C7C7D7E7F808081828383848586878788898A8A8B8C8D8E8E8F8F9090919292939494959696979899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A2A2A3A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9A9AAAAAAABABABACACAC><00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141515161718191A1B1B1C1D1E1F20202122232425262728292A2B2C2D2E2F30313233343536373738393A3B3C3D3E3F404142434445464748494A4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061616161626364656566676869696A6B6B6C6D6E6E6F70717172737474757677777879797A7B7C7C7D7E7F7F8081818283838485858686878888898A8B8B8C8D8D8E8E8F8F90909191929293939494959596969797989899999A9A9B9B9C9C9C9D9D9E9E9E9F9F9FA0A0A1A1A1A1A2A2A2A3A3><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101020202020203030304040505060606070708090A0A0B0C0D0E0F0F101112131415161718191A1B1D1E1F20212324252728292B2C2E2F303233353637393B3C3E4041434546484A4B4D4F51525456585A5C5E5F61636567696B6D6F717375777A7C7E80828587898B8E90929497999B9DA0A2A4A6A8ABADAFB1B3B5B7B9BBBD><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959493929190908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423222120>4 %_Br[1 0 50 0 %_BS%_1 0 50 0 Bs0 0 50 100 %_BS%_0 0 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Radial Gradient 2)(Radial Gradient 2) 1 6 Bd[0<FDFDFDFDFDFCFCFCFCFCFBFBFBFBFBFAFAFAFAFAF9F9F9F8F8F8F7F7F6F6F5F5F5F5F4F4F3F3F2F2F1F1F0F0EFEFEFEEEEEDEDECECECEBEBEAE9E9E9E8E7E7E7E6E6E5E5E4E3E3E3E2E1E0E0E0DFDEDEDDDDDCDCDBDADAD9D8D8D7D7D6D6D5D4D4D3D2D2D1D1D0CFCFCECDCDCCCCCBCACAC9C9C8C7C7C6C6C5C5C4C3C3C2C2C1C1C0C0BEBEBDBDBCBCBBBBBABAB9B9B7B7B6B6B5B5B3B3B3B2B2B1B1B1B0B0AEAEAEADADACACACABABABAAAAAAA9A9A9A8A8A8A6A6A6A6A5A5A5A5A4A4A4A4A2A2A2A2A2A1A1A1A1A19F9F9F9F9F9F9F9F9E9E9E9E9E9E9E9E9E>101<000102030405060708090A0B0C0D0E0F10111112131415161718191A1B1C1D1D1E1F20212223242425262728292A2A2B2C2D2E2F2F3031323334343536373838393A3B3B3C3D3E3E3F40414142434444454647474849494A4B4B4C4D4E4E4F505051525253535455555657575858595A5A5B5B5C5D5D5E5E5F5F606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6E6F6F70707071717272727373747474757575767676777777787878797979797A7A7A7A7B7B7B7B7C7C7C7C7C7D7D7D7D7D7E7E7E7E7E7E7E7E7F7F7F7F7F7F7F7F7F>04 %_Br0<9E9D9B999896959392908F8E8C8B8A88878684838181807E7D7B7A79777675737272706F6D6C6B6A6A68676564626261605E5D5D5C5A595757565555535251514F4E4E4D4B4B4A4A4848474745454444>101<7F808182838485868788898A8B8C8D8E8F90919293939495969798999A9B9C9D9E9E9FA0A1A2A3A4A4A5A6A7A8A9A9AAABACADADAEAFB0B1B1B2B3B3B4B5B6B6B7B8B8B9BABABBBBBCBCBDBDBEBEBFBF>04 %_Br<0001030405050608090A0B0D0E0F111213151618191A1C1D1E1F202123242627282A2B2C2D2F303132343536373838393B3C3D3E3F4141434445464748494A4B4C4D4F4F51525353535455565758595A5B5C5C5D5E5F60616162626364656667676869696A6A6B6B6C6D6D6E6F7070707172737374757575757576767778787879797A7B7B7B7C7C7D7D7D7D7E7E7F80808081818182828282><444341413F3E3E3C3C3A3939373634343232312F2E2C2C2B292927262624232120201E1D1B1B1A18181515141212100F0F0C0C0B0909060606040402020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>10<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBABAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAAAA9A8A7A6A5A4A3A2A1A09F9E9E9D9C9B9A99989796959594939291908F8E8D8D8C8B8A8988878786858483828281807F7E7D7D7C7B7A79797877767675747473><BFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C6C6C6C7C7C8C8C8C9C9CACACACBCBCCCCCCCDCDCECECECFCFD0D0D0D1D1D2D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDCDDDDDEDEDEDFDFE0E0E0E1E1E1E2E2E3E3E3E4E4E4E5E5E6E6E6E7E7E7E8E8E9E9E9EAEAEAEBEBEBECECECEDEDEEEEEEEFEFEFF0F0F0F1F1F1F2F2F2F3F3F3F4F4F4F5F5F5F6F6F6F7F7F7F7F8F8><00000000000101010101010101010102020202020202020203030303030303030304040404040404040404050505050505050505050606060606060606060707070707070707070708080808080808080808090909090909090909090A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F>4 %_Br<8282828383838384848485858586868686878787878788888989898A8A8A8B8B8C8C8C8D8D8D8D8E8E8E8F8F8F8F90909091919292939394949595959696969697979898989899999A9A9A9A9B9B9C9C9C9C9D9D9E9E9E9E9F9E9F9FA0A0A0A1A1A1A2A2A2A2A3A3A3A4A4A5A5A5A6A6A6A7A7A8A8A8A9A9AAAAAAAAABABABABACACACADADADADADAEAEAFAFB0B0B0B1B1B2B2B3B3B4B4B4B5B5B6B6B7B7B7B9B8B9B9BABABBBBBBBCBCBDBDBDBDBEBEBFBFBFBFBFC0C0C0C0C1C1C1C1C1C1C1C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3C3C3C4C3C4C4C4C4C4C4C5C5C5C5C5C5C5C5><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010203030405060608080A0A0B0C0C0E0E101012121313161618181A1B1B1C1C1E1E2020232325252828292A2B2C2E2E3030><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFCFBFAF9F9F7F5F4F1F1F0EEEDECEBEBEBEAE8E7E6E6E4E2E1DFDDDCDBDAD9D8D7D6D5D5D3D2D1D0CECDCBCBCAC8C7C6C5C4C3C2C2C0BFBEBCBBBAB8B7B5B5B4B2B1B0AEADACAAA9A7A6A6A4A3A1A09E9C9A9997959492908E8E8C8A88868582817E7D7A79767572706F6C6A6866646462605D5C59575553514E4D4A484644413F3C3A373633312E2C29282523>0<737373727272727171717070706F6F6F6E6E6E6D6D6D6C6C6B6B6B6A6A6A69696868686767666665656564646363626262616160605F5F5E5E5D5D5C5C5C5B5B5A5A59595858575756565555545453535252515150504F4F4E4E4D4D4C4C4B4B4A4A494948484747464545444443434242414140403F3E3E3D3D3C3C3B3B3A3A39383837373636353534333332323131302F2F2E2E2D2D2C2B2B2A2A29292827272626252424232322222120201F1F1E1D1D1C1C1B1A1A191918171716161514141313121111100F0F0E0E0D0C0C0B0B0A09090807070606050404030302010100><F8F8F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F3F3F3F3F2F2F2F1F1F1F0F0F0F0EFEFEFEEEEEEEDEDEDECECECEBEBEBEAEAEAE9E9E9E8E8E7E7E7E6E6E6E5E5E5E4E4E4E3E3E2E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDCDBDBDADADAD9D9D8D8D8D7D7D6D6D6D5D5D4D4D4D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCCCCCCCBCBCACAC9C9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C3C2C2C1C1C0C0BFBFBFBEBEBDBDBCBCBBBBBBBABAB9B9B8B8B7B7B6B6B6B5B5B4B4B3B3B2B2B1B1B1B0B0AFAFAEAEADADACACABABAAAAAAA9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A0><0F0F10101011111212131314141515161617171819191A1A1B1C1C1D1D1E1F1F2021212223232425252627272829292A2B2C2C2D2E2E2F303131323334343536373738393A3A3B3C3D3D3E3F404141424344454546474849494A4B4C4D4D4E4F5051525253545556575758595A5B5C5D5D5E5F60616263636465666768696A6A6B6C6D6E6F70717272737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919293949495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6>4 %_Br<C5C5C5C5C6C6C7C7C8C8C8C8C9C9C9CACBCBCCCCCCCCCCCCCDCDCECECFCFD0D0D1D1D1D1D1D2D2D2D3D3D3D4D4D4D4D4D4D5D5D5D5D5D6D6D6D6D7D6D7D7D7D7D7D8D8D8D9D9D9DAD9DADADADADADADADADADBDBDADBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDCDBDBDBDBDBDBDADBDBDADBDADADADADADADADADADADAD9D9D9D9D8D8D8D8D8D7D7D7D7D7D7D6D6D6D6D6D6><3032343436383A3B3D3F3F4143444648494B4D4F4F51535557595B5C5E6062646567686A6C6E70727476787A7D7F81838587898B8D8D8E9092949597999A9C9E9FA1A2A3A5A6A8A9ABACAEAFB0B1B2B3B4B5B6B7B7B8B9BABBBCBDBEBFC0C0C1C2C2C3C4C4C5C6C7C7C8C9C9C9CACACBCCCCCDCDCECECFCFCFD0D0D0D1D1D1D2D2D2D3D3D4D3D4D4D4D5D5D5D6D6D6D6D6D6D6D6D6D7D7><232120201F1E1C1B18171716141312100F0E0D0C0C09080706050402010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>0<0000010101020203030304040505060606070708080809090A0A0B0B0B0C0C0D0D0E0E0E0F0F10101111111212131314141415151616171718181819191A1A1B1B1C1C1C1D1D1E1E1F1F20202021212222232324242425252626272728282829292A2A2B2B2C2C2D2D2D2E2E2F2F303031313232323333343435353636373737383839393A3A3B3B3C3C3C3D3D3E3E3F3F404041414242><A09F9E9E9D9C9B9A99989897969594939291908F8F8E8D8C8B8A89888786858483828281807F7E7D7C7B7A79787776757473727170706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756555453525251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110><C6C6C6C6C6C6C6C6C7C7C7C7C7C7C7C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9C9C9C9C9C9C9C9CACACACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCCCCCCCCCCCDCDCDCDCDCDCDCDCDCDCDCDCECECECECECECECECECECECECFCFCFCFCFCFCFCFCFCFCFCFD0D0D0D0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D1D2D2D2D2D2D2>4 %_Br[0 0.992157 1 0 1 0 0 2 33.3333 0 %_BS%_0 0.992157 1 0 1 0 0 2 33.3333 0 Bs0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 %_BS%_0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 Bs0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 %_BS%_0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 Bs0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 %_BS%_0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 Bs0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 %_BS%_0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 Bs0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 %_BS%_0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 4)(Unnamed gradient 4) 0 3 Bd[<94949495959595959596969797979797969696969696969696969595959595959494949493929292919191919090908E8E8D8D8C8C><000000010203050608090B0D0F11121416181A1B1C1E1F21222426292A2C2D2F303133343638393A3B3C3E3F404243454647484A4B>1<000000000000000000000000000001010101010101010202020203040405050606070708090A0A0B0C0D0D0E0F1112121314151617><77777777777778787878787878787878797979797979797979797A7A7A7A7A7A7A7A7A7A7A7B7B7B7B7B7B7B7B7B7B7C7C7C7C7C7C><C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D><1D1E1E1F1F20202121212222232324252526262727282829292A2A2B2B2C2C2D2D2E2E2F2F30303131323233333434353536363737>4 %_Br<15151616171819191A1A1B1B1C1C1D1D1F1F202021212222242425252626272728292A2A2B2B2B2C2C2D2E2E2F3030313132323333343435353637383839393A3A3B3B3C3C3D3D3E3E3F3F40414142424343444445464747484849494A4A4B4B4C4D4E4E4F4F50505151525253535455565656575758595A5A5B5C5C5D5E5E5F5F6060616162626363656566666767686869696A6A6B6C6C6D6D6E6E6F6F7070717172727373747476767777787879797A7A7B7B7C7D7E7E7F7F808081818182828384858585868787878789898A8A8B8B8C8C8D8D8E8E8F8F90909191929293939494>0<0000010102030404060708090A0C0E0F101213141517181A1B1C1E1F21212324262728292B2C2D2F30313234353737393A3B3C3E3F414243454647494A4C4D4F50515254555657585A5B5C5E5F606263656667696A6B6C6E6F717273757778797B7C7D7F808283848687898A8C8D8F909193949597989A9C9D9FA0A2A3A5A6A7A9AAABACADAFB0B2B3B4B5B7B8B9BABCBDBEBFC1C2C3C4C6C7C8C9CBCCCDCED0D1D2D3D5D6D6D7D8DADBDCDDDEDFE0E1E2E4E5E6E8E9EBEDEEF0F1F3F4F6F7F9FAFBFDFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF>0<E5E5E4E4E3E3E2E2E1E1E0E0DFDFDEDEDDDDDCDCDBDBDADAD9D9D8D8D7D7D6D6D5D5D4D4D3D3D3D2D2D1D1D0D0CFCFCECECDCDCCCCCBCBCACAC9C9C8C8C7C7C6C6C5C5C4C4C3C3C2C2C1C1C0C0C0BFBFBEBEBDBDBCBCBBBBBABAB9B9B8B8B7B7B6B6B5B5B4B4B3B3B2B2B1B1B0B0AFAFAEAEAEADADACACABABAAAAA9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A09F9F9E9E9D9D9C9C9C9B9B9A9A99999898979796969595949493939292919190908F8F8E8E8D8D8C8C8B8B8A8A8989898888878786868585848483838282818180807F7F7E7E7D7D7C7C7B7B7A7A797978787777><F6F6F6F5F5F5F5F4F4F4F4F3F3F3F3F3F2F2F2F2F1F1F1F1F0F0F0F0F0EFEFEFEFEEEEEEEEEDEDEDEDEDECECECECEBEBEBEBEAEAEAEAEAE9E9E9E9E8E8E8E8E8E7E7E7E7E6E6E6E6E5E5E5E5E5E4E4E4E4E3E3E3E3E2E2E2E2E2E1E1E1E1E0E0E0E0DFDFDFDFDFDEDEDEDEDDDDDDDDDCDCDCDCDCDBDBDBDBDADADADAD9D9D9D9D9D8D8D8D8D7D7D7D7D6D6D6D6D6D5D5D5D5D4D4D4D4D3D3D3D3D3D2D2D2D2D1D1D1D1D0D0D0D0D0CFCFCFCFCECECECECECDCDCDCDCCCCCCCCCBCBCBCBCBCACACACAC9C9C9C9C8C8C8C8C8C7C7C7C7C6C6C6C6C5C5C5C5C5C4C4C4C4C3C3C3C3C2C2C2><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D>4 %_Br[0.54902 0.294118 1 0.090196 0.486275 0.552941 0.215686 2 50 100 %_BS%_0.54902 0.294118 1 0.090196 0.486275 0.552941 0.215686 2 50 100 Bs0.580392 0 1 0 0.466667 0.760784 0.113725 2 50 50 %_BS%_0.580392 0 1 0 0.466667 0.760784 0.113725 2 50 50 Bs0.082353 0 0 0 0.898039 0.964706 1 2 50 0 %_BS%_0.082353 0 0 0 0.898039 0.964706 1 2 50 0 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Offset Squares Pattern)(Offset Squares Pattern) 0 0 55.0781 55.0801 [%AI3_Tile(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR0 0 m0 55.0801 L55.0781 55.0801 L55.0781 0 L0 0 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.043137 0 0.713725 0 1 1 0.4 Xa 0.043137 0 0.713725 0 1 1 0.4 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR26.1436 52.3262 m26.1436 29.4307 L3.03125 29.4307 L3.03125 52.3262 L26.1436 52.3262 Lf25.0264 50.123 m5.89063 50.123 L5.89063 32.4961 L25.0264 32.4961 L25.0264 50.123 Lf*U*u5.89063 50.123 m25.0264 50.123 L25.0264 32.4961 L5.89063 32.4961 L5.89063 50.123 Ln10.0313 34.2578 m24.1338 34.2578 L24.1338 48.3613 L10.0313 48.3613 L10.0313 34.2578 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0 0.501961 0.984314 0 0.968627 0.576471 0.117647 Xa 0 0.501961 0.984314 0 0.968627 0.576471 0.117647 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR22.4082 48.793 m8.30566 48.793 L8.30566 34.6895 L22.4082 34.6895 L22.4082 48.793 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.003922 0.984314 0.976471 0 0.929412 0.12549 0.141176 Xa 0.003922 0.984314 0.976471 0 0.929412 0.12549 0.141176 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR52.6943 24.7852 m52.6943 1.67578 L28.9355 1.67578 L28.9355 24.7852 L52.6943 24.7852 Lf47.6777 22.582 m30.0527 22.582 L30.0527 4.95703 L47.6777 4.95703 L47.6777 22.582 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR30.0527 22.582 m50.6982 22.582 L50.6982 4.95703 L30.0527 4.95703 L30.0527 22.582 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.501961 0 0.992157 0 0.54902 0.776471 0.247059 Xa 0.501961 0 0.992157 0 0.54902 0.776471 0.247059 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR47.4199 21.252 m32.2393 21.252 L32.2393 6.50293 L47.4199 6.50293 L47.4199 21.252 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.698039 0.14902 0 0 0.160784 0.670588 0.886275 Xa 0.698039 0.14902 0 0 0.160784 0.670588 0.886275 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR27.5391 27.5391 m27.5391 0 L0 0 L0 27.5391 L27.5391 27.5391 Lf25.4316 26.1445 m2.75293 26.1445 L2.75293 2.16992 L25.4316 2.16992 L25.4316 26.1445 Lf*U*u4.95605 7.40039 m22.582 7.40039 L22.582 25.0273 L4.95605 25.0273 L4.95605 7.40039 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.188235 0 0.980392 0 0.85098 0.878431 0.129412 Xa 0.188235 0 0.980392 0 0.85098 0.878431 0.129412 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR22.582 5.67383 m4.95605 5.67383 L4.95605 25.0273 L22.582 25.0273 L22.582 5.67383 Lf20.3887 21.3281 m7.58105 21.3281 L7.58105 10.0313 L20.3887 10.0313 L20.3887 21.3281 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.494118 0.992157 0.011765 0 0.576471 0.152941 0.560784 Xa 0.494118 0.992157 0.011765 0 0.576471 0.152941 0.560784 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR6.93555 8.73633 m21.0371 8.73633 L21.0371 22.8379 L6.93555 22.8379 L6.93555 8.73633 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.623529 0 0.003922 0 0.2 0.776471 0.956863 Xa 0.623529 0 0.003922 0 0.2 0.776471 0.956863 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR55.0781 55.0801 m55.0781 27.5391 L27.5391 27.5391 L27.5391 55.0801 L55.0781 55.0801 Lf52.3252 50.9688 m30.292 50.9688 L30.292 28.9355 L52.3252 28.9355 L52.3252 50.9688 Lf*U*u30.292 50.9688 m52.3252 50.9688 L52.3252 28.9355 L30.292 28.9355 L30.292 50.9688 Ln32.4951 30.0527 m50.1221 30.0527 L50.1221 47.6777 L32.4951 47.6777 L32.4951 30.0527 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.043137 0 0.713725 0 1 1 0.4 Xa 0.043137 0 0.713725 0 1 1 0.4 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR50.1221 30.0527 m32.4951 30.0527 L32.4951 48.9727 L50.1221 48.9727 L50.1221 30.0527 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0 0.901961 0 0 1 0.2 0.6 Xa 0 0.901961 0 0 1 0.2 0.6 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR34.9063 33.749 m49.0078 33.749 L49.0078 47.8506 L34.9063 47.8506 L34.9063 33.749 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed Brush Pat 11)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7957 8425 m-7922.2397 8425 L-7922.2397 8342.4668 L-7957 8342.4668 L-7957 8425 Lnu0 O0.74902 0.678431 0.670588 0.901961 0 0 0 Xa-7929.0366 8361.5625 m-7934.79 8342.4668 L-7943.4492 8342.4668 L-7950.2036 8361.5625 L-7957 8361.7627 L-7957 8425 L-7922.2397 8424.7998 L-7922.2397 8361.5625 L-7929.0366 8361.5625 LfUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 12)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7957 8425 m-7922.2397 8425 L-7922.2397 8319.4668 L-7957 8319.4668 L-7957 8425 Lnu0 O0.74902 0.678431 0.670588 0.901961 0 0 0 Xa-7929.0366 8338.5625 m-7934.79 8319.4668 L-7943.4492 8319.4668 L-7950.2036 8338.5625 L-7957 8338.7617 L-7957 8402 L-7922.2397 8401.7988 L-7922.2397 8338.5625 L-7929.0366 8338.5625 LfUu-7957 8412.2617 m-7957 8425 L-7922.2397 8424.7988 L-7922.2397 8412.0625 L-7957 8412.2617 LfUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 2)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7957 8425 m-7912.6304 8425 L-7912.6304 8397.667 L-7957 8397.667 L-7957 8425 Ln0 O0.74902 0.678431 0.670588 0.901961 0 0 0 Xa-7924.2319 8416.7627 m-7927.9834 8397.667 L-7941.6475 8397.667 L-7945.3989 8416.7627 L-7957 8416.7627 L-7957 8425 L-7912.6304 8425 L-7912.6304 8416.7627 L-7924.2319 8416.7627 LfU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 3)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7957 8425 m-7912.6304 8425 L-7912.6304 8397.0664 L-7957 8397.0664 L-7957 8425 Ln0 O0.74902 0.678431 0.670588 0.901961 0 0 0 Xa-7924.2319 8410.5566 m-7927.9834 8397.0664 L-7941.6475 8397.0664 L-7945.3989 8410.5566 L-7957 8410.5566 L-7957 8425 L-7912.6304 8425 L-7912.6304 8410.5566 L-7924.2319 8410.5566 LfU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 4)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7957 8425 m-7912.6304 8425 L-7912.6304 8383.667 L-7957 8383.667 L-7957 8425 Lnu0 O0.74902 0.678431 0.670588 0.901961 0 0 0 Xa-7924.2319 8402.7627 m-7929.9854 8383.667 L-7938.6445 8383.667 L-7945.3989 8402.7627 L-7957 8402.7627 L-7957 8425 L-7912.6304 8425 L-7912.6304 8402.7627 L-7924.2319 8402.7627 LfUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 5)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7957 8425 m-7920.6382 8425 L-7920.6382 8383.667 L-7957 8383.667 L-7957 8425 Lnu0 O0.74902 0.678431 0.670588 0.901961 0 0 0 Xa-7928.2358 8402.7627 m-7933.9893 8383.667 L-7942.6484 8383.667 L-7949.4028 8402.7627 L-7957 8402.7627 L-7957 8425 L-7920.6382 8425 L-7920.6382 8402.7627 L-7928.2358 8402.7627 LfUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 6)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7957 8425 m-7922.6401 8425 L-7922.6401 8397.0664 L-7957 8397.0664 L-7957 8425 Ln0 O0.74902 0.678431 0.670588 0.901961 0 0 0 Xa-7929.2368 8410.5566 m-7932.9883 8397.0664 L-7946.6523 8397.0664 L-7950.4038 8410.5566 L-7957 8410.5566 L-7957 8425 L-7922.6401 8425 L-7922.6401 8410.5566 L-7929.2368 8410.5566 LfU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 7)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7957 8425 m-7922.6401 8425 L-7922.6401 8379.7324 L-7957 8379.7324 L-7957 8425 Ln0 O0.74902 0.678431 0.670588 0.901961 0 0 0 Xa-7929.2368 8393.2227 m-7932.9883 8379.7324 L-7946.6523 8379.7324 L-7950.4038 8393.2227 L-7957 8393.2227 L-7957 8425 L-7922.6401 8425 L-7922.6401 8393.2227 L-7929.2368 8393.2227 LfU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 8)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7957 8425 m-7922.6401 8425 L-7922.6401 8368.2012 L-7957 8368.2012 L-7957 8425 Ln0 O0.74902 0.678431 0.670588 0.901961 0 0 0 Xa-7929.2368 8381.6914 m-7932.9883 8368.2012 L-7946.6523 8368.2012 L-7950.4038 8381.6914 L-7957 8381.6914 L-7957 8413.4688 L-7922.6401 8413.4688 L-7922.6401 8381.6914 L-7929.2368 8381.6914 Lf-7957 8417.0244 m-7957 8425 L-7922.6401 8425 L-7922.6401 8417.0244 L-7957 8417.0244 LfU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 9)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7957 8425 m-7912.6304 8425 L-7912.6304 8358.0137 L-7957 8358.0137 L-7957 8425 Lnu0 O0.74902 0.678431 0.670588 0.901961 0 0 0 Xa-7924.2319 8377.1094 m-7929.9854 8358.0137 L-7938.6445 8358.0137 L-7945.3989 8377.1094 L-7957 8377.1094 L-7957 8410.3574 L-7912.6304 8410.3574 L-7912.6304 8377.1094 L-7924.2319 8377.1094 LfUu-7957 8415.7754 m-7957 8425 L-7912.6304 8425 L-7912.6304 8415.7754 L-7957 8415.7754 LfUU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe PatternOnPath Brush Tool/ Pattern Brush 1/ Adobe Patter) -(nOnPath Brush Tool/ Pattern Brush 2/ Adobe PatternOnPath Brush) -( Tool/ Pattern Brush 3/ Adobe PatternOnPath Brush Tool/ Patter) -(n Brush 4/ Adobe PatternOnPath Brush Tool/ Pattern Brush 5/ Ad) -(obe PatternOnPath Brush Tool/ Pattern Brush 6/ Adobe PatternOn) -(Path Brush Tool/ Pattern Brush 7/ Adobe PatternOnPath Brush To) -(ol/ Pattern Brush 8/ Adobe PatternOnPath Brush Tool/ Pattern B) -(rush 10/ Adobe PatternOnPath Brush Tool/ Pattern Brush 11/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe PatternOnPath Brush Tool)(Pattern Brush 1)(1 / Unnamed Brush Pat 2/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe PatternOnPath Brush Tool)(Pattern Brush 10)(1 / Unnamed Brush Pat 11/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe PatternOnPath Brush Tool)(Pattern Brush 11)(1 / Unnamed Brush Pat 12/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe PatternOnPath Brush Tool)(Pattern Brush 2)(1 / Unnamed Brush Pat 3/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe PatternOnPath Brush Tool)(Pattern Brush 3)(1 / Unnamed Brush Pat 4/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe PatternOnPath Brush Tool)(Pattern Brush 4)(1 / Unnamed Brush Pat 5/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe PatternOnPath Brush Tool)(Pattern Brush 5)(1 / Unnamed Brush Pat 6/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe PatternOnPath Brush Tool)(Pattern Brush 6)(1 / Unnamed Brush Pat 7/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe PatternOnPath Brush Tool)(Pattern Brush 7)(1 / Unnamed Brush Pat 8/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe PatternOnPath Brush Tool)(Pattern Brush 8)(1 / Unnamed Brush Pat 9/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb0.74902 0.678431 0.670588 0.901961 ([Registration]) 0 Xs([Registration])Pc0 0 0 0 1 1 1 Xa(White)Pc0.74902 0.678431 0.670588 0.901961 0 0 0 Xa(Black)Pc0 0.992157 1 0 1 0 0 Xa(RGB Red)Pc0.062745 0 0.964706 0 1 1 0 Xa(RGB Yellow)Pc0.627451 0 1 0 0 1 0 Xa(RGB Green)Pc0.517647 0 0.12549 0 0 1 1 Xa(RGB Cyan)Pc0.882353 0.768627 0 0 0 0 1 Xa(RGB Blue)Pc0.270588 0.815686 0 0 1 0 1 Xa(RGB Magenta)Pc0.168627 0.980392 0.92549 0.066667 0.756863 0.152941 0.176471 Xa(R=193 G=39 B=45)Pc0.003922 0.992157 0.972549 0 0.929412 0.109804 0.141176 Xa(R=237 G=28 B=36)Pc0 0.796078 0.968627 0 0.945098 0.352941 0.141176 Xa(R=241 G=90 B=36)Pc0 0.501961 0.984314 0 0.968627 0.576471 0.117647 Xa(R=247 G=147 B=30)Pc0 0.34902 0.870588 0 0.984314 0.690196 0.231373 Xa(R=251 G=176 B=59)Pc0.047059 0 0.933333 0 0.988235 0.933333 0.129412 Xa(R=252 G=238 B=33)Pc0.188235 0 0.980392 0 0.85098 0.878431 0.129412 Xa(R=217 G=224 B=33)Pc0.501961 0 0.992157 0 0.54902 0.776471 0.247059 Xa(R=140 G=198 B=63)Pc0.745098 0 0.996078 0 0.223529 0.709804 0.290196 Xa(R=57 G=181 B=74)Pc0.862745 0.176471 1 0.039216 0 0.572549 0.270588 Xa(R=0 G=146 B=69)Pc0.901961 0.333333 0.988235 0.258824 0 0.407843 0.215686 Xa(R=0 G=104 B=55)Pc0.760784 0 0.74902 0 0.133333 0.709804 0.45098 Xa(R=34 G=181 B=115)Pc0.784314 0.090196 0.458824 0 0 0.662745 0.615686 Xa(R=0 G=169 B=157)Pc0.698039 0.14902 0 0 0.160784 0.670588 0.886275 Xa(R=41 G=171 B=226)Pc0.87451 0.52549 0 0 0 0.443137 0.737255 Xa(R=0 G=113 B=188)Pc0.992157 0.964706 0.035294 0.003922 0.180392 0.192157 0.572549 Xa(R=46 G=49 B=146)Pc1 1 0.262745 0.247059 0.105882 0.078431 0.392157 Xa(R=27 G=20 B=100)Pc0.745098 0.984314 0.007843 0.003922 0.4 0.176471 0.568627 Xa(R=102 G=45 B=145)Pc0.494118 0.992157 0.011765 0 0.576471 0.152941 0.560784 Xa(R=147 G=39 B=143)Pc0.34902 1 0.372549 0.109804 0.619608 0 0.364706 Xa(R=158 G=0 B=93)Pc0.117647 1 0.494118 0.007843 0.831373 0.078431 0.352941 Xa(R=212 G=20 B=90)Pc0 0.968627 0.203922 0 0.929412 0.117647 0.47451 Xa(R=237 G=30 B=121)Pc0.227451 0.27451 0.4 0 0.780392 0.698039 0.6 Xa(R=199 G=178 B=153)Pc0.4 0.427451 0.52549 0.066667 0.6 0.52549 0.458824 Xa(R=153 G=134 B=117)Pc0.505882 0.529412 0.607843 0.235294 0.45098 0.388235 0.341176 Xa(R=115 G=99 B=87)Pc0.576471 0.603922 0.639216 0.419608 0.32549 0.278431 0.254902 Xa(R=83 G=71 B=65)Pc0.227451 0.384314 0.635294 0.011765 0.776471 0.611765 0.427451 Xa(R=198 G=156 B=109)Pc0.317647 0.490196 0.741176 0.098039 0.65098 0.486275 0.321569 Xa(R=166 G=124 B=82)Pc0.360784 0.572549 0.839216 0.227451 0.54902 0.384314 0.223529 Xa(R=140 G=98 B=57)Pc0.392157 0.639216 0.933333 0.356863 0.458824 0.298039 0.141176 Xa(R=117 G=76 B=36)Pc0.415686 0.698039 0.968627 0.490196 0.376471 0.219608 0.07451 Xa(R=96 G=56 B=19)Pc0.478431 0.733333 0.835294 0.682353 0.258824 0.129412 0.043137 Xa(R=66 G=33 B=11)PcBb2 (Linear Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Linear Gradient 1)PcBb0 0 0 0 Bh2 (Radial Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Radial Gradient 1)PcBb2 (Linear Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Linear Gradient 2)PcBb0 0 0 0 Bh2 (Radial Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Radial Gradient 2)Pc(Offset Squares Pattern) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Offset Squares Pattern)PcBb2 (Midday Sky) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Midday Sky)Pc0 g(K=100)Pc0.1 g(K=90)Pc0.2 g(K=80)Pc0.3 g(K=70)Pc0.4 g(K=60)Pc0.5 g(K=50)Pc0.6 g(K=40)Pc0.7 g(K=30)Pc0.8 g(K=20)Pc0.9 g(K=10)Pc0.95 g(R=241 G=241  B=242)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 A0 O0.682353 0.596078 0.741176 0.698039 0.156863 0.164706 0.121569 Xa0 J 0 j 1 w 4 M []0 d0 XR580.5332 83.416 m579.9258 95.4277 L589.2324 99.4023 598.4043 104.123 607.4434 109.5781 C606.6992 115.2344 604.877 120.6855 603.541 126.2207 C592.9043 127.6631 582.1348 128.1367 571.8828 127.8496 C570.5137 131.6172 568.5117 135.1191 566.8477 138.7637 C565.0391 142.3398 562.7637 145.6621 560.7402 149.1191 C567.2383 157.0645 573.0391 165.4385 578.5137 174.4863 C575.25 179.166 571.0859 183.0957 567.334 187.3652 C557.2637 183.6895 547.5117 179.1055 538.5645 174.0898 C535.582 176.7656 532.209 178.9736 529.0449 181.4297 C525.7617 183.7188 522.2344 185.6553 518.8379 187.7793 C520.8945 197.7881 522.1738 207.9375 522.8184 218.4902 C517.7422 221.1045 512.2148 222.6787 506.8945 224.7188 C499.6758 216.791 493.168 208.1797 487.5879 199.5762 C483.7129 200.6201 479.6846 200.9121 475.7402 201.6113 c471.7813 202.252 467.7461 202.1426 463.7539 202.4395 C460.9141 212.5117 457.334 221.8428 453.0186 231.502 C447.3311 231.3906 441.6992 230.5098 436.0684 229.5996 C433.3125 219.4268 431.5527 208.707 430.6201 198.3984 C426.6885 197.5488 422.9365 196.123 419.1807 194.7188 C415.3535 193.4883 411.7891 191.6328 408.1738 189.8965 C401.0059 197.416 393.3506 204.2695 385.1035 210.6475 C380.1436 207.8242 375.4922 204.5537 371 201.0479 C373.3281 190.7363 376.7285 180.502 380.7236 170.9102 C377.6484 168.3203 374.9844 165.3223 372.3086 162.3369 C369.4883 159.4727 367.209 156.1592 364.793 152.9629 C354.9492 156.3105 345.0342 158.8145 334.7422 160.665 C331.6387 155.877 329.0752 150.791 326.6836 145.6074 C333.5068 137.5527 341.3027 130.0371 349.2773 123.4072 C347.75 119.6875 346.79 115.7939 345.8223 111.9023 C344.666 108.0508 344.1465 104.0664 343.5547 100.0996 C333.3145 98.4668 323.2236 96.0674 313.3643 92.9121 C312.9805 87.2363 312.8086 81.5645 313.2637 75.8887 C323.2031 71.9492 333.1992 68.8809 343.5547 66.7295 C344.1465 62.7656 344.666 58.7813 345.8223 54.9297 C346.79 51.0391 347.75 47.1426 349.2773 43.4229 C341.1982 37.3232 333.0068 30.3555 325.8359 23.0078 C328.3271 17.8848 330.6035 12.6328 333.7188 7.85742 C344.4502 9.05273 354.6094 10.9219 364.793 13.8691 C367.209 10.6738 369.4883 7.35742 372.3086 4.49414 C374.9844 1.50977 377.6523 -1.49023 380.7236 -4.08203 C376.3877 -13.249 372.3887 -23.1846 369.4238 -33.0283 C373.9844 -36.4346 378.4473 -39.9795 383.416 -42.792 C392.3545 -36.7881 400.5176 -30.3838 408.1738 -23.0635 C411.7891 -24.7998 415.3535 -26.6553 419.1807 -27.8877 C422.9365 -29.292 426.6885 -30.7158 430.6201 -31.5674 C431.0566 -41.6787 432.1484 -52.3662 434.1191 -62.458 C439.752 -63.2451 445.3633 -64.4736 451.0508 -64.5654 C456.1504 -54.9502 460.3867 -45.6709 463.7539 -35.6084 C467.75 -35.3115 471.7813 -35.4189 475.7402 -34.7803 c479.6846 -34.0791 483.7129 -33.7881 487.5879 -32.7432 C492.6719 -41.5264 498.4922 -50.1416 505.0234 -58.5107 C510.3945 -56.626 515.8262 -54.8057 521.0332 -52.5068 C521.1055 -41.6279 520.418 -31.1846 518.8379 -20.9482 C522.2344 -18.8252 525.7617 -16.8848 529.0449 -14.5977 C532.209 -12.1406 535.582 -9.93359 538.5645 -7.25781 C547.1523 -12.6611 556.3086 -17.5771 565.9668 -21.9482 C569.834 -17.793 573.8066 -13.6895 577.3262 -9.22949 C572.334 0.441406 566.9238 9.3457 560.7402 17.7129 C562.7637 21.1719 565.0391 24.4922 566.8477 28.0684 C568.5117 31.7119 570.5137 35.2148 571.8828 38.9834 C581.998 38.1836 592.3926 38.0879 602.9844 38.7148 C604.4922 44.2031 606.0488 49.7188 607.1367 55.3027 C598.2324 61.5332 589.1543 66.9053 579.9258 71.4043 C580.5332 83.416 Lfu199.2378 167.0234 m197.5542 171.0947 195.0542 174.833 191.9351 177.958 c188.8101 181.0781 185.0723 183.5771 181 185.2607 c176.9297 186.9502 172.5317 187.8174 168.1074 187.8271 c163.6831 187.8174 159.2856 186.9502 155.2144 185.2607 c151.1431 183.5771 147.4048 181.0781 144.2803 177.958 c141.1602 174.833 138.6611 171.0947 136.9771 167.0234 c135.2876 162.9521 134.4209 158.5547 134.4106 154.1309 c134.4209 149.7061 135.2876 145.3086 136.9771 141.2383 c138.6611 137.166 141.1602 133.4277 144.2803 130.3037 c147.4048 127.1836 151.1431 124.6836 155.2144 123 c159.2856 121.3105 163.6831 120.4434 168.1074 120.4336 c172.5317 120.4434 176.9297 121.3105 181 123 c185.0723 124.6836 188.8101 127.1836 191.9351 130.3037 c195.0542 133.4277 197.5542 137.166 199.2378 141.2383 c200.9272 145.3086 201.7944 149.7061 201.8042 154.1309 c201.7944 158.5547 200.9272 162.9521 199.2378 167.0234 cn*u1 D0 O0.682353 0.596078 0.741176 0.698039 0.156863 0.164706 0.121569 Xa206.6694 154.1309 m206.4683 158.084 L207.9116 158.6592 209.3491 159.2842 210.7788 159.96 C210.5483 161.6836 210.2534 163.3945 209.7632 165.0684 C208.1792 165.1465 206.6069 165.1758 205.0483 165.1563 C204.6812 166.4219 204.1655 167.6416 203.7319 168.8867 C203.2085 170.0957 202.5991 171.2705 202.0386 172.4639 C203.1577 173.5547 204.2378 174.6807 205.3003 175.8555 C204.4312 177.3623 203.4878 178.8184 202.4019 180.1787 C200.9097 179.6436 199.4487 179.0674 198.0171 178.4531 C197.1694 179.4609 196.2534 180.415 195.3745 181.3975 C194.3921 182.2773 193.437 183.1924 192.4292 184.041 C193.0444 185.4717 193.6206 186.9336 194.1558 188.4248 C192.7964 189.5107 191.3394 190.4541 189.8315 191.3232 C188.6577 190.2607 187.5308 189.1807 186.4404 188.0615 C185.2471 188.624 184.0732 189.2314 182.8633 189.7549 C181.6191 190.1895 180.3984 190.7051 179.1328 191.0723 C179.1523 192.6299 179.123 194.2031 179.0449 195.7871 C177.3721 196.2773 175.6602 196.5723 173.936 196.8018 C173.2607 195.3721 172.6357 193.9346 172.0605 192.4922 C168.1074 192.6924 L164.1543 192.4922 L163.5791 193.9346 162.9536 195.3721 162.2783 196.8018 C160.5542 196.5723 158.8428 196.2773 157.1699 195.7871 C157.0913 194.2031 157.0625 192.6299 157.0815 191.0723 C155.8159 190.7051 154.5962 190.1895 153.3511 189.7549 C152.1416 189.2314 150.9678 188.623 149.7739 188.0615 C148.6836 189.1807 147.5571 190.2607 146.3823 191.3232 C144.8755 190.4531 143.4189 189.5107 142.0591 188.4248 C142.5942 186.9336 143.1699 185.4717 143.7847 184.041 C142.7769 183.1914 141.8232 182.2773 140.8398 181.3975 C139.9604 180.415 139.0459 179.4609 138.1963 178.4531 C136.7666 179.0674 135.3047 179.6436 133.8125 180.1787 C132.7275 178.8184 131.7842 177.3623 130.9141 175.8545 C131.9766 174.6807 133.0566 173.5537 134.1768 172.4629 C133.6143 171.2705 133.0068 170.0957 132.4829 168.8867 C132.0483 167.6416 131.5327 166.4219 131.1655 165.1563 C129.6074 165.1748 128.0352 165.1465 126.4507 165.0674 C125.9604 163.3945 125.666 161.6836 125.436 159.959 C126.8657 159.2842 128.3032 158.6592 129.7461 158.084 C129.5454 154.1309 L129.7461 150.1777 L128.3037 149.6016 126.8662 148.9766 125.436 148.3008 C125.666 146.5771 125.9604 144.8652 126.4507 143.1934 C128.0352 143.1143 129.6074 143.085 131.1655 143.1045 C131.5327 141.8389 132.0483 140.6191 132.4829 139.374 C133.0068 138.165 133.6147 136.9902 134.1768 135.7979 C133.0571 134.707 131.9766 133.5801 130.9146 132.4063 C131.7842 130.8984 132.7275 129.4424 133.813 128.082 C135.3047 128.6172 136.7666 129.1934 138.1968 129.8076 C139.0464 128.7998 139.9604 127.8457 140.8398 126.8633 C141.8232 125.9844 142.7773 125.0684 143.7847 124.2197 C143.1704 122.7891 142.5942 121.3271 142.0591 119.8359 C143.4189 118.75 144.876 117.8076 146.3828 116.9375 C147.5571 118 148.6836 119.0801 149.7744 120.1992 C150.9678 119.6377 152.1416 119.0293 153.3511 118.5059 C154.5962 118.0713 155.8159 117.5557 157.082 117.1885 C157.0625 115.6299 157.0913 114.0576 157.1704 112.4736 C158.8428 111.9834 160.5542 111.6885 162.2788 111.459 C162.9541 112.8887 163.5791 114.3262 164.1543 115.7686 C168.1074 115.5684 L172.0605 115.7686 L172.6357 114.3262 173.2612 112.8887 173.9365 111.459 C175.6602 111.6895 177.3721 111.9834 179.0449 112.4736 C179.123 114.0576 179.1523 115.6299 179.1328 117.1885 C180.3984 117.5557 181.6191 118.0713 182.8633 118.5059 C184.0732 119.0293 185.2471 119.6377 186.4414 120.1992 C187.5308 119.0801 188.6577 118 189.8315 116.9375 C191.3394 117.8076 192.7964 118.751 194.1558 119.8359 C193.6206 121.3271 193.0444 122.7891 192.4292 124.2197 C193.437 125.0684 194.3921 125.9844 195.3745 126.8633 C196.2534 127.8457 197.1694 128.7998 198.019 129.8076 C199.4487 129.1934 200.9097 128.6172 202.4019 128.082 C203.4878 129.4424 204.4312 130.8984 205.3003 132.4063 C204.2378 133.5801 203.1577 134.707 202.0386 135.7979 C202.6011 136.9912 203.2085 138.165 203.7319 139.374 C204.1655 140.6191 204.6812 141.8389 205.0483 143.1045 C206.6069 143.085 208.1792 143.1143 209.7632 143.1934 C210.2534 144.8662 210.5483 146.5771 210.7788 148.3008 C209.3491 148.9766 207.9116 149.6016 206.4683 150.1777 C206.6694 154.1309 Lf0 D191.9351 130.3037 m188.8101 127.1836 185.0723 124.6836 181 123 c176.9297 121.3105 172.5317 120.4434 168.1074 120.4336 c163.6831 120.4434 159.2856 121.3105 155.2144 123 c151.1431 124.6836 147.4048 127.1836 144.2803 130.3037 c141.1602 133.4277 138.6611 137.166 136.9771 141.2383 c135.2876 145.3086 134.4209 149.7061 134.4106 154.1309 c134.4209 158.5547 135.2876 162.9521 136.9771 167.0234 c138.6611 171.0947 141.1602 174.833 144.2803 177.958 c147.4048 181.0781 151.1431 183.5771 155.2144 185.2607 c159.2856 186.9502 163.6831 187.8174 168.1074 187.8271 c172.5317 187.8174 176.9297 186.9502 181 185.2607 c185.0723 183.5771 188.8101 181.0781 191.9351 177.958 c195.0542 174.833 197.5542 171.0947 199.2378 167.0234 c200.9272 162.9521 201.7944 158.5547 201.8042 154.1309 c201.7944 149.7061 200.9272 145.3086 199.2378 141.2383 c197.5542 137.166 195.0542 133.4277 191.9351 130.3037 cf*UUu260.0801 60.1445 m254.2461 68.4697 245.4629 74.5313 235.957 77.7383 c226.377 80.8486 215.668 80.8486 206.0879 77.7383 c196.582 74.5313 187.7988 68.4707 181.9653 60.1445 c175.8892 51.9746 172.8271 41.9668 172.689 31.7891 c172.8271 21.6113 175.8892 11.6035 181.9653 3.43359 c187.7988 -4.89258 196.582 -10.9531 206.0879 -14.1602 c215.668 -17.2705 226.377 -17.2705 235.957 -14.1602 c245.4629 -10.9531 254.2461 -4.8916 260.0801 3.43359 c266.1563 11.6035 269.2178 21.6113 269.3555 31.7891 c269.2178 41.9668 266.1563 51.9746 260.0801 60.1445 cn*u1 D0 O0.682353 0.596078 0.741176 0.698039 0.156863 0.164706 0.121569 Xa291.5938 31.7891 m291.4043 35.6465 291.3145 39.5156 290.5723 43.3193 C296.6279 46.2617 302.4102 49.6758 307.9326 53.5742 C307.1211 57.1621 305.957 60.6396 304.6211 64.0645 C297.7773 64.4941 290.7207 64.1641 284.0781 63.3486 C282.377 66.8047 280.3711 70.1445 278.0605 73.2285 C275.8496 76.4043 273.2139 79.2422 270.5469 82.0332 C273.5996 87.8555 276.2822 94.0391 278.5547 100.5371 C275.6816 102.793 272.8037 105.082 269.71 107.0352 C263.7891 103.1455 258.4746 99.1016 253.498 94.4033 C250.0684 96.2012 246.4941 97.6592 242.8242 98.8887 C239.1221 99.9648 235.3896 101.041 231.5469 101.4922 C230.5977 108.0977 229.1309 114.7617 227.1309 121.1699 C223.4805 121.4199 219.8301 121.5303 216.1797 121.2373 C213.668 114.8076 211.7715 108.2012 210.4971 101.4922 C206.6543 101.041 202.9229 99.9648 199.2207 98.8887 C195.5508 97.6592 191.9766 96.2012 188.5469 94.4033 C183.8555 99.2734 178.9058 103.5332 173.417 107.6992 C170.2173 105.8945 167.4194 103.5039 164.4658 101.3457 C166.291 94.5859 168.7041 88.0635 171.4971 82.0322 C168.8306 79.2422 166.1958 76.4043 163.9849 73.2285 C161.6738 70.1445 159.668 66.8047 157.9663 63.3486 C151.4912 64.4551 144.583 65.1807 137.8682 65.2568 C136.604 61.8105 135.2324 58.3965 134.4292 54.8066 C139.8467 50.4043 145.4458 46.5938 151.4727 43.3184 C150.731 39.5156 150.6401 35.6465 150.4517 31.7891 C150.6401 27.9316 150.731 24.0625 151.4727 20.2588 C145.417 17.3174 139.6348 13.9023 134.1123 10.0039 C134.9238 6.41602 136.0884 2.93848 137.4238 -0.486328 C144.2681 -0.916016 151.3242 -0.585938 157.9663 0.229492 C159.668 -3.22656 161.6738 -6.56641 163.9849 -9.65039 C166.1958 -12.8262 168.8311 -15.6641 171.4976 -18.4551 C168.4453 -24.2773 165.7627 -30.4609 163.4893 -36.959 C166.3623 -39.2148 169.2407 -41.5039 172.335 -43.457 C178.2559 -39.5674 183.5703 -35.5234 188.5469 -30.8252 C191.9766 -32.623 195.5508 -34.0811 199.2207 -35.3105 C202.9229 -36.3867 206.6553 -37.4629 210.498 -37.9141 C211.4463 -44.5195 212.9141 -51.1836 214.9141 -57.5918 C218.5645 -57.8418 222.2148 -57.9521 225.8652 -57.6592 C228.377 -51.2295 230.2734 -44.623 231.5469 -37.9141 C235.3896 -37.4629 239.1221 -36.3867 242.8242 -35.3105 C246.4941 -34.0811 250.0684 -32.623 253.498 -30.8252 C258.1895 -35.6953 263.1387 -39.9551 268.627 -44.1211 C271.8271 -42.3164 274.625 -39.9258 277.5781 -37.7676 C275.7539 -31.0078 273.3408 -24.4854 270.5479 -18.4541 C273.2139 -15.6641 275.8496 -12.8262 278.0605 -9.65039 C280.3711 -6.56641 282.377 -3.22656 284.0781 0.229492 C290.5527 -0.876953 297.4619 -1.60254 304.1768 -1.67871 C305.4404 1.76758 306.8125 5.18164 307.6152 8.77148 C302.1982 13.1738 296.5996 16.9844 290.5723 20.2598 C291.3145 24.0625 291.4043 27.9316 291.5938 31.7891 Cf0 D235.957 -14.1602 m226.377 -17.2705 215.668 -17.2705 206.0879 -14.1602 c196.582 -10.9531 187.7988 -4.89258 181.9653 3.43359 c175.8892 11.6035 172.8271 21.6113 172.689 31.7891 c172.8271 41.9668 175.8892 51.9746 181.9653 60.1445 c187.7988 68.4707 196.582 74.5313 206.0879 77.7383 c215.668 80.8486 226.377 80.8486 235.957 77.7383 c245.4629 74.5313 254.2461 68.4697 260.0801 60.1445 c266.1563 51.9746 269.2178 41.9668 269.3555 31.7891 c269.2178 21.6113 266.1563 11.6035 260.0801 3.43359 c254.2461 -4.8916 245.4629 -10.9531 235.957 -14.1602 cf*UUu0 0 0 0 1 1 1 Xa453.2539 344.9751 m447.75 348.7959 441.332 351.1274 434.7188 351.9883 c428.0508 352.9063 421.2168 351.8906 415.0059 349.5879 c408.7324 347.3154 403.123 343.3032 398.6797 338.3052 c394.1504 333.3511 391.0625 327.2124 389.4629 320.7603 c387.8057 314.3203 387.8057 307.3394 389.4629 300.8989 c391.0625 294.4468 394.1504 288.3081 398.6807 283.3545 c403.123 278.356 408.7324 274.3442 415.0059 272.0718 c421.2168 269.769 428.0518 268.7534 434.7188 269.6714 c441.332 270.5322 447.75 272.8638 453.2539 276.6851 c458.6895 280.5581 463.3613 285.6309 466.4375 291.5645 c469.4902 297.5034 471.1406 304.0967 471.2031 310.8301 c471.1406 317.5635 469.4902 324.1567 466.4375 330.0952 c463.3604 336.0288 458.6895 341.1016 453.2539 344.9751 cf*u1 D0.682353 0.596078 0.741176 0.698039 0.156863 0.164706 0.121569 Xa487.8809 310.8301 m487.584 316.6948 L492.1289 318.6377 496.6074 320.9424 501.0225 323.6064 C500.6582 326.3667 499.7676 329.0298 499.1152 331.7329 C493.9219 332.437 488.6621 332.6689 483.6563 332.5278 C482.9873 334.3682 482.0098 336.0781 481.1982 337.8584 C480.3145 339.6035 479.2031 341.2261 478.2148 342.9141 C481.3887 346.7944 484.2207 350.8828 486.8945 355.3022 C485.3008 357.5859 483.2666 359.5054 481.4355 361.5898 C476.5166 359.7954 471.7549 357.5566 467.3867 355.1084 C465.9297 356.4146 464.2832 357.4922 462.7383 358.6929 C461.1338 359.8101 459.4121 360.7554 457.7529 361.793 C458.7578 366.6797 459.3818 371.6367 459.6973 376.79 C457.2188 378.0659 454.5195 378.8345 451.9219 379.8311 C448.3965 375.9595 445.2188 371.7549 442.4941 367.5527 C440.6016 368.0625 438.6348 368.2056 436.709 368.5469 c434.7754 368.8594 432.8047 368.8066 430.8545 368.9512 C429.4678 373.8701 427.7207 378.4263 425.6113 383.1431 C422.8359 383.0884 420.085 382.6592 417.3359 382.2144 C415.9893 377.2466 415.1309 372.0117 414.6738 366.978 C412.7559 366.563 410.9238 365.8667 409.0889 365.1812 C407.2188 364.5806 405.4785 363.6743 403.7139 362.8267 C400.2148 366.498 396.4766 369.8452 392.4492 372.96 C390.0273 371.5806 387.7559 369.9834 385.5625 368.2715 C386.6973 363.2363 388.3584 358.2383 390.3086 353.5557 C388.8086 352.2905 387.5078 350.8271 386.2002 349.3687 C384.8223 347.9697 383.7109 346.3521 382.5303 344.7905 C377.7246 346.4268 372.8828 347.6479 367.8574 348.5518 C366.3418 346.2139 365.0879 343.731 363.9219 341.1997 C367.2539 337.2651 371.0605 333.5957 374.9551 330.3589 C374.209 328.542 373.7402 326.6401 373.2676 324.7393 C372.7021 322.8584 372.4492 320.9141 372.1592 318.9771 C367.1592 318.1797 362.2314 317.0078 357.418 315.4658 C357.2305 312.6948 357.1465 309.9243 357.3691 307.1533 C362.2217 305.23 367.1035 303.7324 372.1592 302.6816 C372.4492 300.7446 372.7031 298.8008 373.2676 296.9199 C373.7402 295.0186 374.21 293.1167 374.9551 291.3003 C371.0098 288.3218 367.0098 284.9189 363.5078 281.3306 C364.7246 278.8286 365.8359 276.2656 367.3574 273.9316 C372.5977 274.5166 377.5576 275.4297 382.5313 276.8682 C383.7109 275.3071 384.8232 273.689 386.2012 272.2905 C387.5078 270.832 388.8096 269.3687 390.3096 268.1035 C388.1934 263.6255 386.2402 258.7754 384.793 253.9678 C387.0186 252.3032 389.1992 250.5732 391.626 249.2002 C395.9912 252.1313 399.9756 255.2588 403.7148 258.8325 C405.4795 257.9849 407.2197 257.0791 409.0898 256.4785 C410.9248 255.793 412.7559 255.0967 414.6758 254.6816 C414.8887 249.7441 415.4219 244.5239 416.3848 239.5957 C419.1357 239.2114 421.876 238.6133 424.6523 238.5679 C427.1426 243.2632 429.2109 247.793 430.8555 252.709 C432.8066 252.8535 434.7754 252.8003 436.709 253.1128 c438.6357 253.4541 440.6025 253.5972 442.4941 254.1069 C444.9766 249.8174 447.8184 245.6099 451.0078 241.5249 C453.6309 242.4448 456.2832 243.3325 458.8262 244.4561 C458.8613 249.7686 458.5264 254.8682 457.7539 259.8672 C459.4121 260.9043 461.1348 261.8501 462.7393 262.9673 C464.2832 264.168 465.9297 265.2456 467.3877 266.5518 C471.5811 263.9141 476.0508 261.5132 480.7676 259.3784 C482.6572 261.4072 484.5957 263.4106 486.3145 265.5898 C483.8779 270.311 481.2354 274.6592 478.2148 278.7461 C479.2041 280.4341 480.3145 282.0566 481.1982 283.8018 C482.0098 285.5825 482.9883 287.292 483.6563 289.1328 C488.5957 288.7422 493.6719 288.6948 498.8438 289.002 C499.5801 291.6821 500.3398 294.3745 500.8711 297.1016 C496.5234 300.1445 492.0898 302.7676 487.584 304.9653 C487.8809 310.8301 Lf0 D466.4375 291.5645 m463.3613 285.6309 458.6895 280.5581 453.2539 276.6851 c447.75 272.8638 441.332 270.5322 434.7188 269.6714 c428.0518 268.7534 421.2168 269.769 415.0059 272.0718 c408.7324 274.3442 403.123 278.356 398.6807 283.3545 c394.1504 288.3081 391.0625 294.4468 389.4629 300.8989 c387.8057 307.3394 387.8057 314.3203 389.4629 320.7603 c391.0625 327.2124 394.1504 333.3511 398.6797 338.3052 c403.123 343.3032 408.7324 347.3154 415.0059 349.5879 c421.2168 351.8906 428.0508 352.9063 434.7188 351.9883 c441.332 351.1274 447.75 348.7959 453.2539 344.9751 c458.6895 341.1016 463.3604 336.0288 466.4375 330.0952 c469.4902 324.1567 471.1406 317.5635 471.2031 310.8301 c471.1406 304.0967 469.4902 297.5034 466.4375 291.5645 cf*UUu334.707 338.8535 m333.4453 340.6211 331.8291 342.2061 329.8105 343.0879 C327.8096 343.8438 325.5859 344.4492 323.4131 343.9766 C321.2813 343.6367 319.1465 342.8242 317.5527 341.2969 C315.9219 339.8682 314.584 338 314.0693 335.8711 C313.4023 333.7959 313.4023 331.4971 314.0693 329.4229 C314.584 327.2939 315.9219 325.4248 317.5527 323.9971 C319.1465 322.4697 321.2813 321.6572 323.4141 321.3174 C325.5869 320.8447 327.8105 321.4502 329.8105 322.2061 C331.8301 323.0879 333.4453 324.6738 334.707 326.4414 C335.915 328.293 336.4043 330.4639 336.5547 332.6475 C336.4043 334.8311 335.915 337.002 334.707 338.8535 Cn*u1 D0 O0.682353 0.596078 0.741176 0.698039 0.156863 0.164706 0.121569 Xa340.166 332.6475 m340 334.2949 L341.0859 334.7295 342.1641 335.2334 343.2285 335.8066 C343.0293 337.1836 342.4854 338.5029 342.0859 339.8379 C340.877 339.7412 339.6875 339.5781 338.5322 339.3535 C337.7422 340.8086 L337.4961 341.3057 337.0703 341.6797 336.7422 342.1211 C337.416 343.0713 338.0449 344.0762 338.625 345.1309 C337.7441 346.2148 336.5439 346.9883 335.4902 347.8965 C334.5449 347.1934 333.6152 346.3896 332.7676 345.582 C331.3125 346.3721 L330.8477 346.6836 330.2783 346.748 329.7637 346.9414 C329.8164 348.1016 329.8018 349.2852 329.7178 350.4834 C328.3955 350.9785 326.9609 350.9023 325.582 351.0938 C325.168 350.0254 324.8242 348.8877 324.5488 347.7168 C322.9004 347.5508 L322.3477 347.5176 321.8027 347.4404 321.2832 347.2373 C320.7041 348.2334 320.0557 349.2119 319.3398 350.166 C317.9668 349.832 316.7559 349.1191 315.5303 348.4414 C315.7832 347.2813 316.0635 346.2051 316.4629 345.0771 C315.1865 344.0244 L314.7656 343.668 314.3066 343.3506 313.9873 342.8926 C312.9629 343.415 311.8906 343.8857 310.7773 344.3008 C309.8164 343.2705 309.1523 342.0381 308.5078 340.792 C309.3398 339.9541 310.1836 339.1875 311.0957 338.4678 C310.6035 336.8867 L310.4756 336.3525 310.1982 335.8486 310.1934 335.2891 C309.0547 335.1729 307.9043 334.9883 306.748 334.7334 C306.5273 333.3418 306.5273 331.9521 306.748 330.5605 C307.9043 330.3047 309.0547 330.1201 310.1934 330.0039 C310.1992 329.4453 310.4766 328.9404 310.6045 328.4063 C311.0957 326.8252 L310.1836 326.1064 309.3408 325.3398 308.5078 324.501 C309.1533 323.2559 309.8164 322.0225 310.7773 320.9932 C311.8926 321.4082 312.9639 321.8789 313.9883 322.4014 C314.3066 321.9434 314.7666 321.626 315.1875 321.2695 C316.4648 320.2158 L316.0645 319.0889 315.7832 318.0127 315.5313 316.8525 C316.7568 316.1738 317.9678 315.4619 319.3418 315.1279 C320.0566 316.082 320.7051 317.0605 321.2852 318.0557 C321.8037 317.8535 322.3477 317.7764 322.9023 317.7432 C324.5488 317.5771 L324.8242 316.4063 325.1689 315.2686 325.584 314.2002 C326.9619 314.3916 328.3965 314.3154 329.7188 314.8105 C329.8027 316.0098 329.8174 317.1924 329.7646 318.3525 C330.2793 318.5469 330.8477 318.6113 331.3125 318.9229 C332.7676 319.7119 L333.6152 318.9053 334.5459 318.1016 335.4922 317.3984 C336.5449 318.3066 337.7441 319.0801 338.625 320.165 C338.0449 321.2188 337.416 322.2236 336.7422 323.1738 C337.0703 323.6152 337.4971 323.9893 337.7422 324.4863 C338.5322 325.9414 L339.6875 325.7168 340.877 325.5537 342.0859 325.458 C342.4854 326.792 343.0293 328.1113 343.2285 329.4883 C342.1641 330.0615 341.0859 330.5654 340 331 C340.166 332.6475 Lf0 D329.8105 322.2061 m327.8105 321.4502 325.5869 320.8447 323.4141 321.3174 C321.2813 321.6572 319.1465 322.4697 317.5527 323.9971 C315.9219 325.4248 314.584 327.2939 314.0693 329.4229 C313.4023 331.4971 313.4023 333.7959 314.0693 335.8711 C314.584 338 315.9219 339.8682 317.5527 341.2969 C319.1465 342.8242 321.2813 343.6367 323.4131 343.9766 C325.5859 344.4492 327.8096 343.8438 329.8105 343.0879 C331.8291 342.2061 333.4453 340.6211 334.707 338.8535 C335.915 337.002 336.4043 334.8311 336.5547 332.6475 C336.4043 330.4639 335.915 328.293 334.707 326.4414 C333.4453 324.6738 331.8301 323.0879 329.8105 322.2061 Cf*UUu373.1494 463.1865 m370.0566 467.9883 365.5322 471.9424 360.3535 474.2744 c355.2363 476.5898 349.3164 477.5781 343.6201 476.6475 c337.9756 475.9092 332.6426 473.4063 328.2969 469.6572 c323.9346 465.9033 320.749 460.8809 319.1367 455.4609 c317.5332 450.042 317.5342 443.9531 319.1367 438.5352 c320.75 433.1143 323.9355 428.0918 328.2979 424.3379 c332.6445 420.5879 337.9775 418.0859 343.6221 417.3467 c349.3174 416.416 355.2363 417.4043 360.3525 419.7207 c365.5313 422.0527 370.0557 426.0078 373.1494 430.8105 c376.2891 435.6289 377.8154 441.2051 377.9355 446.998 C377.8154 452.793 376.29 458.3672 373.1494 463.1865 cn*u1 D382.3594 469.1172 m378.1396 475.6719 371.999 481.0313 364.9092 484.2363 c357.873 487.4316 349.8096 488.7188 342.0732 487.4922 c334.3535 486.4639 327.0234 483.043 321.1191 477.9336 c315.1904 472.8252 310.8281 465.9873 308.624 458.543 c306.4307 451.0898 306.4307 442.9063 308.625 435.4531 c310.8291 428.0078 315.1914 421.1699 321.1211 416.0625 c327.0254 410.9521 334.3555 407.5313 342.0752 406.502 c349.8105 405.2754 357.873 406.5625 364.9092 409.7588 c371.998 412.9639 378.1387 418.3242 382.3594 424.8789 c386.6338 431.4434 388.7793 439.1514 388.8906 446.998 c388.7793 454.8457 386.6348 462.5547 382.3594 469.1172 cn0 D379.5195 426.708 m375.6465 420.6934 370.0039 415.7666 363.5039 412.8301 c357.0596 409.9063 349.6582 408.7109 342.5518 409.8457 c335.4727 410.7852 328.7578 413.9238 323.334 418.6133 c317.8877 423.3047 313.8887 429.583 311.8662 436.4033 c309.8545 443.2285 309.8545 450.7666 311.8662 457.5918 c313.8877 464.4131 317.8867 470.6914 323.332 475.3809 c328.7559 480.0713 335.4707 483.209 342.5508 484.1484 c349.6582 485.2832 357.0596 484.0889 363.5049 481.165 c370.0049 478.2285 375.6465 473.3027 379.5195 467.2891 c383.4443 461.2637 385.3984 454.2129 385.5127 446.998 C385.3984 439.7852 383.4443 432.7344 379.5195 426.708 cn*U*u1 D0 O0.682353 0.596078 0.741176 0.698039 0.156863 0.164706 0.121569 Xa419.0791 446.998 m418.9551 449.5879 418.8828 452.1865 418.6387 454.7695 C422.6748 456.6953 426.6729 458.8867 430.6084 461.3389 C429.5898 467.624 427.6621 473.7422 425.2998 479.6543 C420.6367 479.5801 416.0518 479.25 411.583 478.6768 C410.5273 481.0635 409.0781 483.2314 407.7412 485.4619 c406.4131 487.7002 404.7188 489.6885 403.1904 491.7881 C405.5986 495.6426 407.71 499.5938 409.6963 503.7861 C405.4648 508.5215 400.543 512.5879 395.373 516.2676 C391.5264 513.7402 387.8115 510.9395 384.3643 508.0527 C382.1807 509.4746 379.8164 510.5703 377.4658 511.6904 C375.1563 512.9023 372.6318 513.6201 370.2041 514.5566 C370.165 519.168 369.7842 523.5811 369.1797 528.1836 C363.0381 529.8926 356.6689 530.6699 350.3555 530.8828 C348.4951 526.7305 346.8984 522.4277 345.5645 518.0596 C342.9717 517.9336 340.377 517.8545 337.8105 517.3789 C335.2285 517.0332 332.6699 516.5781 330.1602 515.8535 C327.6709 519.5898 324.8828 523.3838 321.9199 526.8359 C315.8945 524.7813 310.002 522.2461 304.6055 518.8809 C305.334 514.2959 306.2363 509.9277 307.4814 505.5332 C305.4268 503.9463 303.2266 502.5303 301.3408 500.7402 c299.4199 498.9912 297.4443 497.2969 295.7539 495.3164 C291.6338 497.1211 287.3027 498.7559 282.8848 500.1191 C278.9609 495.1348 275.374 489.8457 272.6309 484.0938 C275.709 480.627 278.8779 477.4102 282.2373 474.4043 C281.3594 471.9561 280.3418 469.5449 279.6553 467.0352 C279.0566 464.5039 278.2012 462.0195 277.8936 459.4316 C273.457 458.7139 268.9824 457.7305 264.4961 456.4805 C263.8066 450.1719 263.8057 443.8213 264.4961 437.5127 C268.9834 436.2637 273.457 435.2793 277.8945 434.5615 C278.2021 431.9746 279.0576 429.4893 279.6563 426.959 C280.3438 424.4492 281.3613 422.0381 282.2393 419.5889 C278.8799 416.583 275.7109 413.3672 272.6328 409.8994 C275.376 404.1484 278.9629 398.8594 282.8867 393.875 C287.3047 395.2393 291.6348 396.873 295.7559 398.6787 C297.4453 396.6982 299.4209 395.0039 301.3418 393.2559 c303.2275 391.4648 305.4287 390.0488 307.4824 388.4619 C306.2373 384.0664 305.3359 379.6992 304.6064 375.1143 C310.0039 371.749 315.8955 369.2129 321.9219 367.1582 C324.8848 370.6113 327.6729 374.4043 330.1621 378.1406 C332.6709 377.417 335.2305 376.9609 337.8115 376.6162 C340.3789 376.1396 342.9736 376.0605 345.5664 375.9355 C346.9014 371.5664 348.4971 367.2637 350.3584 363.1123 C356.6719 363.3252 363.041 364.1025 369.1826 365.8125 C369.7871 370.415 370.168 374.8281 370.207 379.4395 C372.6338 380.376 375.1582 381.0938 377.4668 382.3057 C379.8184 383.4258 382.1826 384.5225 384.3662 385.9434 C387.8145 383.0576 391.5293 380.2568 395.375 377.7305 C400.5449 381.4102 405.4668 385.4766 409.6973 390.2119 C407.7109 394.4043 405.5996 398.3555 403.1914 402.21 C404.7188 404.3086 406.4141 406.2969 407.7412 408.5352 c409.0781 410.7656 410.5273 412.9336 411.583 415.3203 C416.0518 414.748 420.6367 414.418 425.2998 414.3438 C427.6621 420.2559 429.5898 426.373 430.6084 432.6582 C426.6729 435.1104 422.6748 437.3027 418.6387 439.2285 C418.8828 441.8105 418.9551 444.4082 419.0791 446.998 Cf0 D364.9092 409.7588 m357.873 406.5625 349.8105 405.2754 342.0752 406.502 c334.3555 407.5313 327.0254 410.9521 321.1211 416.0625 c315.1914 421.1699 310.8291 428.0078 308.625 435.4531 c306.4307 442.9063 306.4307 451.0898 308.624 458.543 c310.8281 465.9873 315.1904 472.8252 321.1191 477.9336 c327.0234 483.043 334.3535 486.4639 342.0732 487.4922 c349.8096 488.7188 357.873 487.4316 364.9092 484.2363 c371.999 481.0313 378.1396 475.6719 382.3594 469.1172 c386.6348 462.5547 388.7793 454.8457 388.8906 446.998 c388.7793 439.1514 386.6338 431.4434 382.3594 424.8789 c378.1387 418.3242 371.998 412.9639 364.9092 409.7588 cf*U*u1 D379.5195 467.2891 m375.6465 473.3027 370.0049 478.2285 363.5049 481.165 c357.0596 484.0889 349.6582 485.2832 342.5508 484.1484 c335.4707 483.209 328.7559 480.0713 323.332 475.3809 c317.8867 470.6914 313.8877 464.4131 311.8662 457.5918 c309.8545 450.7666 309.8545 443.2285 311.8662 436.4033 c313.8887 429.583 317.8877 423.3047 323.334 418.6133 c328.7578 413.9238 335.4727 410.7852 342.5518 409.8457 c349.6582 408.7109 357.0596 409.9063 363.5039 412.8301 c370.0039 415.7666 375.6465 420.6934 379.5195 426.708 c383.4443 432.7344 385.3984 439.7852 385.5127 446.998 C385.3984 454.2129 383.4443 461.2637 379.5195 467.2891 cf0 D360.3525 419.7207 m355.2363 417.4043 349.3174 416.416 343.6221 417.3467 c337.9775 418.0859 332.6445 420.5879 328.2979 424.3379 c323.9355 428.0918 320.75 433.1143 319.1367 438.5352 c317.5342 443.9531 317.5332 450.042 319.1367 455.4609 c320.749 460.8809 323.9346 465.9033 328.2969 469.6572 c332.6426 473.4063 337.9756 475.9092 343.6201 476.6475 c349.3164 477.5781 355.2363 476.5898 360.3535 474.2744 c365.5322 471.9424 370.0566 467.9883 373.1494 463.1865 c376.29 458.3672 377.8154 452.793 377.9355 446.998 C377.8154 441.2051 376.2891 435.6289 373.1494 430.8105 c370.0557 426.0078 365.5313 422.0527 360.3525 419.7207 cf*UUu*u1 D75.1797 429.4043 m73.3867 433.7393 70.7246 437.7236 67.3984 441.0547 c64.0664 444.3809 60.082 447.043 55.748 448.8359 c51.4131 450.6348 46.7363 451.5576 42.0137 451.5703 c37.291 451.5576 32.6143 450.6348 28.2793 448.8359 c23.9453 447.043 19.9609 444.3809 16.6289 441.0547 c13.3027 437.7236 10.6406 433.7393 8.84766 429.4043 c7.04883 425.0693 6.12598 420.3916 6.11328 415.6699 c6.12598 410.9482 7.04883 406.2705 8.84766 401.9355 c10.6406 397.6006 13.3027 393.6162 16.6289 390.2852 c19.9609 386.959 23.9453 384.2969 28.2793 382.5039 c32.6143 380.7051 37.291 379.7822 42.0137 379.7695 c46.7363 379.7822 51.4131 380.7051 55.748 382.5039 c60.082 384.2969 64.0664 386.959 67.3984 390.2852 c70.7246 393.6162 73.3867 397.6006 75.1797 401.9355 c76.9785 406.2705 77.9014 410.9482 77.9141 415.6699 c77.9014 420.3916 76.9785 425.0693 75.1797 429.4043 cn0 D73.5371 402.6172 m71.834 398.499 69.3037 394.71 66.1416 391.542 c62.9727 388.3799 59.1855 385.8486 55.0664 384.1465 c50.9482 382.4375 46.5078 381.5605 42.0137 381.5479 c37.5195 381.5605 33.0791 382.4375 28.9609 384.1465 c24.8418 385.8486 21.0547 388.3799 17.8857 391.542 c14.7236 394.71 12.1934 398.499 10.4902 402.6172 c8.78125 406.7354 7.9043 411.1758 7.8916 415.6699 c7.9043 420.1641 8.78125 424.6045 10.4902 428.7227 c12.1934 432.8408 14.7236 436.6299 17.8857 439.7979 c21.0547 442.96 24.8418 445.4912 28.9609 447.1934 c33.0791 448.9023 37.5195 449.7793 42.0137 449.792 c46.5078 449.7793 50.9482 448.9023 55.0664 447.1934 c59.1855 445.4912 62.9727 442.96 66.1416 439.7979 c69.3037 436.6299 71.834 432.8408 73.5371 428.7227 c75.2461 424.6045 76.123 420.1641 76.1357 415.6699 c76.123 411.1758 75.2461 406.7354 73.5371 402.6172 cn*U69.8535 427.1953 m68.3525 430.8281 66.1172 434.1758 63.3223 436.9775 c60.5195 439.7734 57.1719 442.0088 53.5391 443.5098 c49.9053 445.0166 45.9961 445.79 42.0137 445.8047 c38.0313 445.79 34.1221 445.0166 30.4883 443.5098 c26.8555 442.0088 23.5078 439.7734 20.7051 436.9775 c17.9102 434.1758 15.6748 430.8281 14.1738 427.1953 c12.667 423.5615 11.8926 419.6523 11.8789 415.6699 c11.8926 411.6875 12.667 407.7783 14.1738 404.1445 c15.6748 400.5117 17.9102 397.1641 20.7051 394.3623 c23.5078 391.5664 26.8555 389.3311 30.4883 387.8301 c34.1221 386.3232 38.0313 385.5498 42.0137 385.5352 c45.9961 385.5498 49.9053 386.3232 53.5391 387.8301 c57.1719 389.3311 60.5195 391.5664 63.3223 394.3623 c66.1172 397.1641 68.3525 400.5117 69.8535 404.1445 c71.3604 407.7783 72.1348 411.6875 72.1484 415.6699 c72.1348 419.6523 71.3604 423.5615 69.8535 427.1953 cn*u1 D0 O0.682353 0.596078 0.741176 0.698039 0.156863 0.164706 0.121569 Xa93.8027 415.6699 m93.6133 419.5625 L95.8145 420.4678 98.0283 421.4678 100.1152 422.5566 C99.7305 425.584 99.1855 428.582 98.3271 431.5186 C95.9473 431.7197 93.6152 431.834 91.2012 431.8213 C89.8564 435.4902 L89.3574 436.6914 88.7539 437.8486 88.1982 439.0254 C89.875 440.7041 91.541 442.4893 93.0498 444.2949 C91.5371 446.9453 89.8672 449.4902 87.9648 451.873 C85.707 451.1572 83.4766 450.3379 81.2607 449.4072 C78.6328 452.29 L75.751 454.917 L76.6816 457.1328 77.501 459.3643 78.2168 461.6211 C75.834 463.5234 73.2891 465.1934 70.6387 466.7061 C68.832 465.1982 67.0479 463.5303 65.3691 461.8545 C64.1924 462.4102 63.0352 463.0127 61.834 463.5127 C58.165 464.8584 L58.1777 467.2715 58.0635 469.6035 57.8613 471.9834 C54.9248 472.8418 51.9268 473.3877 48.9004 473.7715 C47.8115 471.6846 46.8105 469.4707 45.9063 467.2695 C42.0137 467.459 L38.1211 467.2695 L37.2158 469.4707 36.2148 471.6846 35.127 473.7715 C32.0996 473.3877 29.1016 472.8418 26.165 471.9834 C25.9639 469.6035 25.8496 467.2705 25.8613 464.8574 C22.1934 463.5127 L20.9922 463.0127 19.834 462.4102 18.6582 461.8545 C16.9785 463.5303 15.1953 465.1982 13.3887 466.7061 C10.7383 465.1934 8.19336 463.5234 5.81055 461.6211 C6.52637 459.3643 7.3457 457.1328 8.27637 454.917 C5.39453 452.29 L2.76563 449.4072 L0.550781 450.3379 -1.68066 451.1572 -3.9375 451.8721 C-5.83984 449.4902 -7.50977 446.9453 -9.02246 444.2949 C-7.51367 442.4883 -5.84766 440.7041 -4.1709 439.0254 C-4.72656 437.8486 -5.33008 436.6914 -5.8291 435.4902 C-7.17383 431.8213 L-9.58789 431.834 -11.9199 431.7197 -14.2998 431.5186 C-15.1582 428.5811 -15.7041 425.583 -16.0879 422.5566 C-14.001 421.4678 -11.7871 420.4678 -9.58594 419.5625 C-9.77539 415.6699 L-9.58594 411.7773 L-11.7871 410.8721 -14.001 409.8721 -16.0879 408.7832 C-15.7031 405.7559 -15.1582 402.7578 -14.2998 399.8213 C-11.9199 399.6201 -9.58789 399.5059 -7.17383 399.5186 C-5.8291 395.8496 L-5.33008 394.6484 -4.72656 393.4912 -4.1709 392.3145 C-5.84766 390.6357 -7.51367 388.8506 -9.02246 387.0449 C-7.50977 384.3945 -5.83984 381.8496 -3.9375 379.4668 C-1.67969 380.1826 0.550781 381.002 2.7666 381.9326 C5.39453 379.0498 L8.27637 376.4229 L7.3457 374.207 6.52637 371.9756 5.81055 369.7188 C8.19336 367.8164 10.7383 366.1465 13.3887 364.6338 C15.1953 366.1416 16.9795 367.8096 18.6582 369.4854 C19.835 368.9297 20.9922 368.3271 22.1934 367.8271 C25.8623 366.4814 L25.8496 364.0684 25.9639 361.7363 26.166 359.3564 C29.1025 358.498 32.1006 357.9521 35.127 357.5684 C36.2158 359.6553 37.2168 361.8691 38.1211 364.0703 C42.0137 363.8809 L45.9063 364.0703 L46.8115 361.8691 47.8125 359.6553 48.9004 357.5684 C51.9277 357.9521 54.9258 358.498 57.8623 359.3564 C58.0635 361.7363 58.1777 364.0693 58.166 366.4824 C61.834 367.8271 L63.0352 368.3271 64.1934 368.9297 65.3691 369.4854 C67.0488 367.8096 68.832 366.1426 70.6387 364.6338 C73.2891 366.1465 75.834 367.8164 78.2168 369.7188 C77.501 371.9756 76.6816 374.207 75.751 376.4229 C78.6328 379.0498 L81.2617 381.9326 L83.4766 381.002 85.708 380.1826 87.9648 379.4678 C89.8672 381.8496 91.5371 384.3945 93.0498 387.0449 C91.541 388.8516 89.875 390.6357 88.1982 392.3145 C88.7539 393.4912 89.3574 394.6484 89.8564 395.8496 C91.2012 399.5186 L93.6152 399.5059 95.9473 399.6201 98.3271 399.8213 C99.1855 402.7588 99.7314 405.7568 100.1152 408.7832 C98.0283 409.8721 95.8145 410.8721 93.6133 411.7773 C93.8027 415.6699 Lf0 D67.3984 390.2852 m64.0664 386.959 60.082 384.2969 55.748 382.5039 c51.4131 380.7051 46.7363 379.7822 42.0137 379.7695 c37.291 379.7822 32.6143 380.7051 28.2793 382.5039 c23.9453 384.2969 19.9609 386.959 16.6289 390.2852 c13.3027 393.6162 10.6406 397.6006 8.84766 401.9355 c7.04883 406.2705 6.12598 410.9482 6.11328 415.6699 c6.12598 420.3916 7.04883 425.0693 8.84766 429.4043 c10.6406 433.7393 13.3027 437.7236 16.6289 441.0547 c19.9609 444.3809 23.9453 447.043 28.2793 448.8359 c32.6143 450.6348 37.291 451.5576 42.0137 451.5703 c46.7363 451.5576 51.4131 450.6348 55.748 448.8359 c60.082 447.043 64.0664 444.3809 67.3984 441.0547 c70.7246 437.7236 73.3867 433.7393 75.1797 429.4043 c76.9785 425.0693 77.9014 420.3916 77.9141 415.6699 c77.9014 410.9482 76.9785 406.2705 75.1797 401.9355 c73.3867 397.6006 70.7246 393.6162 67.3984 390.2852 cf*U*u1 D73.5371 428.7227 m71.834 432.8408 69.3037 436.6299 66.1416 439.7979 c62.9727 442.96 59.1855 445.4912 55.0664 447.1934 c50.9482 448.9023 46.5078 449.7793 42.0137 449.792 c37.5195 449.7793 33.0791 448.9023 28.9609 447.1934 c24.8418 445.4912 21.0547 442.96 17.8857 439.7979 c14.7236 436.6299 12.1934 432.8408 10.4902 428.7227 c8.78125 424.6045 7.9043 420.1641 7.8916 415.6699 c7.9043 411.1758 8.78125 406.7354 10.4902 402.6172 c12.1934 398.499 14.7236 394.71 17.8857 391.542 c21.0547 388.3799 24.8418 385.8486 28.9609 384.1465 c33.0791 382.4375 37.5195 381.5605 42.0137 381.5479 c46.5078 381.5605 50.9482 382.4375 55.0664 384.1465 c59.1855 385.8486 62.9727 388.3799 66.1416 391.542 c69.3037 394.71 71.834 398.499 73.5371 402.6172 c75.2461 406.7354 76.123 411.1758 76.1357 415.6699 c76.123 420.1641 75.2461 424.6045 73.5371 428.7227 cf0 D63.3223 394.3623 m60.5195 391.5664 57.1719 389.3311 53.5391 387.8301 c49.9053 386.3232 45.9961 385.5498 42.0137 385.5352 c38.0313 385.5498 34.1221 386.3232 30.4883 387.8301 c26.8555 389.3311 23.5078 391.5664 20.7051 394.3623 c17.9102 397.1641 15.6748 400.5117 14.1738 404.1445 c12.667 407.7783 11.8926 411.6875 11.8789 415.6699 c11.8926 419.6523 12.667 423.5615 14.1738 427.1953 c15.6748 430.8281 17.9102 434.1758 20.7051 436.9775 c23.5078 439.7734 26.8555 442.0088 30.4883 443.5098 c34.1221 445.0166 38.0313 445.79 42.0137 445.8047 c45.9961 445.79 49.9053 445.0166 53.5391 443.5098 c57.1719 442.0088 60.5195 439.7734 63.3223 436.9775 c66.1172 434.1758 68.3525 430.8281 69.8535 427.1953 c71.3604 423.5615 72.1348 419.6523 72.1484 415.6699 c72.1348 411.6875 71.3604 407.7783 69.8535 404.1445 c68.3525 400.5117 66.1172 397.1641 63.3223 394.3623 cf*UU*u1 D344.6572 233.9854 m344.3232 240.5806 L349.4336 242.7637 354.4697 245.3555 359.4336 248.3511 C359.0254 251.4565 358.0234 254.4502 357.29 257.4897 C351.4502 258.2827 345.5352 258.542 339.9063 258.3838 C339.1553 260.4526 338.0547 262.3765 337.1416 264.3774 C336.1484 266.3408 334.8984 268.166 333.7871 270.0635 C337.3564 274.4277 340.541 279.0244 343.5479 283.9927 C341.7559 286.5625 339.4688 288.7212 337.4092 291.0645 C331.8789 289.0464 326.5244 286.5293 321.6113 283.7754 C319.9727 285.2446 318.1211 286.457 316.3838 287.8052 C314.5811 289.064 312.6436 290.127 310.7793 291.293 C311.9082 296.7881 312.6104 302.3623 312.9648 308.1563 C310.1777 309.5928 307.1416 310.4556 304.2207 311.5757 C300.2568 307.2227 296.6836 302.4941 293.6191 297.77 C291.4912 298.3433 289.2793 298.5034 287.1143 298.8877 c284.9395 299.2393 282.7236 299.1802 280.5313 299.3423 C278.9727 304.8726 277.0068 309.9966 274.6367 315.3008 C271.5137 315.2393 268.4209 314.7559 265.3291 314.2573 C263.8154 308.6699 262.8496 302.7842 262.3379 297.124 C260.1787 296.6563 258.1182 295.8745 256.0557 295.1035 C253.9541 294.4272 251.9971 293.4082 250.0117 292.4551 C246.0762 296.584 241.8721 300.3486 237.3438 303.8491 C234.6201 302.2988 232.0664 300.5044 229.5996 298.5781 C230.8779 292.916 232.7451 287.2959 234.9385 282.0293 C233.25 280.6079 231.7871 278.9609 230.3174 277.3223 C228.7695 275.75 227.5176 273.9292 226.1909 272.1743 C220.7856 274.0127 215.3413 275.3877 209.6904 276.4043 C207.9863 273.7754 206.5786 270.9819 205.2651 268.1353 C209.0122 263.7119 213.292 259.585 217.6714 255.9458 C216.8325 253.9033 216.3052 251.7642 215.7739 249.627 C215.1392 247.5122 214.8535 245.3247 214.5283 243.146 C208.9067 242.25 203.3652 240.9321 197.9517 239.1992 C197.7407 236.0825 197.646 232.9688 197.8965 229.8516 C203.3545 227.6885 208.8428 226.0039 214.5283 224.8223 C214.8535 222.6455 215.1392 220.458 215.7739 218.3428 C216.3052 216.2061 216.8325 214.0674 217.6714 212.0244 C213.2349 208.6748 208.7373 204.8486 204.7993 200.8145 C206.168 198.001 207.4175 195.1172 209.1284 192.4951 C215.0205 193.1514 220.5991 194.1777 226.1909 195.7959 C227.5176 194.041 228.7695 192.2207 230.3174 190.6475 C231.7871 189.0098 233.252 187.3623 234.9385 185.9385 C232.5576 180.9053 230.3613 175.4492 228.7344 170.0439 C231.2383 168.1729 233.6895 166.2275 236.417 164.6836 C241.3252 167.9795 245.8086 171.4961 250.0117 175.5156 C251.9971 174.5625 253.9541 173.543 256.0557 172.8662 C258.1182 172.0957 260.1787 171.3135 262.3379 170.8457 C262.5771 165.2939 263.1768 159.4248 264.2598 153.8838 C267.3516 153.4512 270.4326 152.7773 273.5566 152.7266 C276.3564 158.0068 278.6826 163.1016 280.5313 168.6279 C282.7256 168.79 284.9395 168.7314 287.1143 169.082 c289.2793 169.4668 291.4912 169.627 293.6191 170.2002 C296.4111 165.377 299.6064 160.6465 303.1934 156.0518 C306.1426 157.0859 309.125 158.0859 311.9844 159.3486 C312.0244 165.3223 311.6465 171.0566 310.7793 176.6768 C312.6436 177.8438 314.5811 178.9082 316.3838 180.165 C318.1211 181.5137 319.9727 182.7256 321.6113 184.1953 C326.3262 181.2275 331.3535 178.5283 336.6582 176.1279 C338.7822 178.4102 340.9629 180.6631 342.8955 183.1123 C340.1543 188.4229 337.1826 193.3115 333.7871 197.9063 C334.8984 199.8066 336.1484 201.6289 337.1416 203.5928 C338.0547 205.5938 339.1553 207.5176 339.9063 209.5869 C345.4609 209.1475 351.1689 209.0947 356.9844 209.4395 C357.8125 212.4531 358.667 215.4814 359.2646 218.5469 C354.376 221.9688 349.3896 224.9189 344.3232 227.3896 C344.6572 233.9854 Lf0 D278.5898 208.9014 m264.7207 208.9014 253.4775 220.1445 253.4775 234.0137 c253.4775 247.8833 264.7207 259.1284 278.5898 259.1284 c292.46 259.1284 303.7051 247.8833 303.7051 234.0137 c303.7051 220.1445 292.46 208.9014 278.5898 208.9014 cf*Uu123.4541 292.5156 m119.1357 298.7012 112.6016 303.1826 105.5723 305.5645 c98.4863 307.8662 90.5137 307.8672 83.4277 305.5645 c76.3984 303.1826 69.8643 298.7012 65.5449 292.5156 c61.0332 286.4531 58.7832 279.0615 58.666 271.5 c58.7832 263.9385 61.0332 256.5469 65.5449 250.4844 c69.8643 244.2988 76.3984 239.8174 83.4277 237.4355 c90.5137 235.1328 98.4863 235.1338 105.5723 237.4355 c112.6016 239.8174 119.1357 244.2988 123.4541 250.4844 c127.9678 256.5469 130.2158 263.9385 130.334 271.5 c130.2158 279.0615 127.9678 286.4531 123.4541 292.5156 cn*u1 D0 O0.682353 0.596078 0.741176 0.698039 0.156863 0.164706 0.121569 Xa152.5703 271.5 m152.373 274.0293 152.4805 276.5898 152.0195 279.0938 C157.9951 281.8135 164.0977 285.2002 169.584 289.1182 C168.7393 292.8877 167.5498 296.5537 166.124 300.1426 C159.1563 300.5918 152.0869 300.1846 145.5527 299.1953 C144.1797 301.3291 143.0518 303.6299 141.4346 305.5996 C139.9795 307.6885 138.3242 309.6133 136.5703 311.4551 C139.9531 317.3242 142.582 323.3301 144.8799 329.8916 C141.959 332.3721 138.9014 334.7402 135.6191 336.7393 C129.6807 332.96 124.3174 328.6885 119.4971 323.8564 C117.249 325.0557 114.8203 325.8281 112.4395 326.7148 C110.0107 327.4336 107.5518 328.1318 105.0547 328.5674 C104.3018 335.0713 102.9326 341.8916 100.9111 348.3584 C97.0811 348.6357 93.248 348.749 89.416 348.4336 C86.8369 342.0215 85.0283 335.1318 83.9453 328.5674 C81.4473 328.1318 78.9893 327.4336 76.5605 326.7148 C74.1797 325.8281 71.751 325.0557 69.502 323.8555 C64.9971 328.8096 59.9785 333.377 54.5195 337.4346 C51.1689 335.5273 48.1445 333.1338 45.1143 330.7783 C46.9941 323.8555 49.2852 317.5566 52.4297 311.4551 C50.6758 309.6123 49.0205 307.6885 47.5654 305.5996 C45.9492 303.6299 44.8203 301.3291 43.4473 299.1943 C37.0195 300.502 30.2744 301.2539 23.3486 301.3926 C21.9883 297.7852 20.5869 294.1846 19.7441 290.4141 C25.082 285.958 31.002 282.1543 36.9805 279.0928 C36.5195 276.5889 36.627 274.0293 36.4297 271.5 C36.627 268.9707 36.5195 266.4102 36.9805 263.9063 C31.0049 261.1865 24.9023 257.7998 19.416 253.8818 C20.2617 250.1123 21.4492 246.4463 22.877 242.8574 C29.8438 242.4082 36.9141 242.8154 43.4473 243.8047 C44.8203 241.6709 45.9492 239.3701 47.5654 237.4004 C49.0205 235.3115 50.6758 233.3877 52.4297 231.5449 C49.0469 225.6758 46.418 219.6699 44.1211 213.1084 C47.041 210.6279 50.0996 208.2598 53.3809 206.2607 C59.3203 210.04 64.6836 214.3115 69.5029 219.1436 C71.751 217.9443 74.1797 217.1719 76.5605 216.2852 C78.9893 215.5664 81.4482 214.8682 83.9453 214.4326 C84.6982 207.9287 86.0674 201.1084 88.0889 194.6416 C91.9189 194.3643 95.752 194.251 99.584 194.5664 C102.1631 200.9785 103.9717 207.8682 105.0547 214.4326 C107.5527 214.8682 110.0107 215.5664 112.4395 216.2852 C114.8203 217.1719 117.249 217.9443 119.4971 219.1445 C124.0029 214.1904 129.0215 209.623 134.4805 205.5654 C137.8311 207.4727 140.8555 209.8662 143.8857 212.2217 C142.0068 219.1445 139.7148 225.4434 136.5703 231.5449 C138.3242 233.3877 139.9795 235.3115 141.4346 237.4004 C143.0518 239.3701 144.1797 241.6709 145.5527 243.8057 C151.9805 242.498 158.7256 241.7461 165.6514 241.6084 C167.0117 245.2148 168.4131 248.8154 169.2549 252.5859 C163.918 257.042 157.998 260.8457 152.0195 263.9072 C152.4805 266.4111 152.373 268.9707 152.5703 271.5 Cf0 D105.5723 237.4355 m98.4863 235.1338 90.5137 235.1328 83.4277 237.4355 c76.3984 239.8174 69.8643 244.2988 65.5449 250.4844 c61.0332 256.5469 58.7832 263.9385 58.666 271.5 c58.7832 279.0615 61.0332 286.4531 65.5449 292.5156 c69.8643 298.7012 76.3984 303.1826 83.4277 305.5645 c90.5137 307.8672 98.4863 307.8662 105.5723 305.5645 c112.6016 303.1826 119.1357 298.7012 123.4541 292.5156 c127.9678 286.4531 130.2158 279.0615 130.334 271.5 c130.2158 263.9385 127.9678 256.5469 123.4541 250.4844 c119.1357 244.2988 112.6016 239.8174 105.5723 237.4355 cf*UUu186.9844 383.5889 m182.4492 387.0313 175.8545 387.7578 170.6777 385.3867 c165.2715 383.1304 161.5854 377.8467 160.9033 372.1323 c160.3247 366.4082 162.7715 360.4458 167.5566 357.0669 C172.0918 353.625 178.6875 352.8984 183.8652 355.2695 c189.2725 357.5254 192.959 362.8115 193.6406 368.5234 c194.2178 374.2432 191.7715 380.2109 186.9844 383.5889 Cn*u1 D0 O0.682353 0.596078 0.741176 0.698039 0.156863 0.164706 0.121569 Xa213.8906 357.8442 m214.8066 360.5186 215.3701 363.2896 215.7441 366.0869 C215.9873 368.8989 216.041 371.7256 215.7295 374.5356 C221.8242 377.3516 227.6318 381.1958 232.8887 386.0117 C231.5439 390.6274 229.7207 395.1196 227.2715 399.2451 C219.9092 399.3052 212.8369 398.106 206.373 395.7803 C204.5645 397.9473 202.417 399.814 200.1621 401.501 c197.9053 403.1997 195.4189 404.5601 192.8633 405.7578 C193.4395 412.3696 193.0293 419.4102 191.4766 426.3149 C186.8271 427.5396 182.0537 428.0469 177.2676 428.1177 C173.5078 421.7329 171.0107 414.9951 169.7695 408.3032 C167.0156 407.6914 164.292 406.9053 161.7192 405.7397 c159.1509 404.584 156.6484 403.23 154.4111 401.5088 C148.8872 405.4312 142.7012 408.4692 135.9082 410.6548 C132.5234 407.25 129.6641 403.3457 127.2148 399.2056 C130.8652 392.7593 135.4443 387.2319 140.6523 382.8115 C139.7368 380.1372 139.1738 377.3657 138.7998 374.5688 C138.5557 371.7573 138.5015 368.9297 138.813 366.1201 C132.7178 363.3042 126.9102 359.4604 121.6538 354.645 C122.9985 350.0288 124.8208 345.5366 127.2705 341.4102 C134.6328 341.3501 141.7051 342.5493 148.1689 344.875 C149.9775 342.708 152.125 340.8413 154.3794 339.1543 c156.6372 337.4556 159.1235 336.0957 161.6792 334.8979 C161.1035 328.2861 161.5142 321.2456 163.0669 314.3408 C167.7168 313.1162 172.4893 312.6094 177.2754 312.5386 C181.0342 318.9233 183.5313 325.6611 184.7725 332.353 C187.5273 332.9653 190.25 333.751 192.8232 334.917 c195.3916 336.0723 197.8945 337.4263 200.1318 339.1475 C205.6553 335.2246 211.8408 332.1865 218.6338 330.0005 C222.0186 333.4053 224.8779 337.3091 227.3281 341.4492 C223.6777 347.896 219.0986 353.4233 213.8906 357.8442 Cf0 D193.6406 368.5234 m192.959 362.8115 189.2725 357.5254 183.8652 355.2695 c178.6875 352.8984 172.0918 353.625 167.5566 357.0669 C162.7715 360.4458 160.3247 366.4082 160.9033 372.1323 c161.5854 377.8467 165.2715 383.1304 170.6777 385.3867 c175.8545 387.7578 182.4492 387.0313 186.9844 383.5889 C191.7715 380.2109 194.2178 374.2432 193.6406 368.5234 cf*UUu*u1 D106.2715 61.8652 m106.6719 64.4756 106.8418 67.1172 107.0215 69.748 C113.4424 71.3984 119.96 73.4238 126.2588 75.8242 C126.2734 79.4004 126.0508 82.9688 125.7539 86.5254 C119.1143 88.7051 112.54 90.4521 105.832 91.7402 C105.4648 94.3574 104.8379 96.9238 104.2959 99.5078 C103.5986 102.0527 102.9824 104.623 102.1133 107.1182 C107.5879 110.9951 112.8242 115.1807 117.8945 119.7031 C116.6006 123.0273 115.1836 126.3154 113.5664 129.5 C106.6563 129.1895 99.7842 128.4004 93.123 127.2236 C91.7607 129.4824 90.4033 131.7539 88.8545 133.8926 C87.3779 136.084 85.7354 138.1533 84.1074 140.2324 C87.7314 145.7715 91.1572 151.6367 94.2256 157.6807 C91.8125 160.3145 89.2617 162.8115 86.6523 165.2471 C80.2559 162.3613 74.2393 159.251 68.4053 155.6777 C66.3623 157.3516 64.1895 158.8555 62.0332 160.3789 C59.8184 161.8164 57.6064 163.2578 55.2949 164.5371 C56.7334 171.1094 57.7451 177.6738 58.4678 184.4785 C55.2598 186.0371 52.0068 187.5059 48.6748 188.7852 C43.7861 183.9014 39.2275 178.667 35.1045 173.332 C32.5771 174.0996 30.0361 174.8164 27.457 175.3896 c24.8857 175.9824 22.2881 176.4844 19.6758 176.8574 C18.6338 183.4414 17.2207 190.0674 15.415 196.582 C11.8594 196.9375 8.2793 197.0527 4.70898 197.0645 C1.91797 190.709 -0.427734 184.2559 -2.33203 177.7246 C-4.96777 177.5811 -7.5918 177.2393 -10.2051 176.8828 c-12.8174 176.4922 -15.415 176.0273 -17.9873 175.4248 C-21.3564 181.2598 -25.0244 186.7705 -29.0723 192.2979 C-32.4844 191.2813 -35.8877 190.2031 -39.2061 188.8848 C-39.541 182.002 -39.3711 175.0293 -38.8379 168.333 C-41.2031 167.1621 -43.5938 166.0332 -45.8691 164.6895 C-48.1943 163.4355 -50.3984 161.9746 -52.6201 160.5508 C-57.79 164.6602 -63.3447 168.6582 -69.0557 172.2402 C-71.9092 170.0879 -74.6318 167.7734 -77.293 165.3926 C-75.0283 158.7734 -72.4648 152.4746 -69.4541 146.3457 C-71.3135 144.4697 -73.0078 142.4395 -74.7148 140.4277 c-76.3691 138.3691 -77.9863 136.2832 -79.4824 134.1055 C-85.8926 136.1396 -92.3301 137.7441 -99.0527 139.0967 C-100.8906 136.041 -102.6494 132.9375 -104.2363 129.7422 C-99.7881 124.4102 -95.0518 119.417 -90.0869 114.8047 C-91.1084 112.3691 -92.0283 109.8945 -92.8516 107.3848 c-93.6416 104.8672 -94.4492 102.3477 -95.0254 99.7705 C-101.707 99.3506 -108.3936 98.5508 -115.0645 97.3623 C-115.7236 93.8535 -116.2271 90.3066 -116.5337 86.748 C-110.4907 83.3799 -104.2305 80.4395 -97.9453 77.9395 C-97.9736 75.3018 -98.0088 72.6553 -97.8184 70.0215 c-97.71 67.3818 -97.4121 64.7578 -97.1055 62.1348 C-103.1436 59.3242 -109.064 56.1543 -114.9121 52.627 C-114.2031 49.1367 -113.4229 45.6641 -112.437 42.2422 C-105.585 41.2939 -98.6689 40.8066 -91.9297 40.7285 C-91.0039 38.2559 -90.0693 35.7852 -88.96 33.3877 c-87.9258 30.958 -86.6855 28.6201 -85.4551 26.2871 C-90.0498 21.5088 -94.5313 16.3613 -98.627 11.0059 C-96.7588 7.95898 -94.7002 5.03223 -92.5684 2.16602 C-85.79 3.78711 -79.2539 5.7793 -72.8828 8.20117 C-71.1924 6.17285 -69.3232 4.30078 -67.4707 2.42188 c-65.5908 0.566406 -63.6426 -1.21484 -61.6211 -2.91406 C-64.2158 -9.08789 -66.4277 -15.3809 -68.3857 -21.9453 C-65.5098 -24.0557 -62.5781 -26.0859 -59.5459 -27.9658 C-53.8125 -23.9971 -48.4346 -19.7891 -43.3691 -15.2383 C-41.043 -16.4902 -38.6523 -17.6084 -36.2393 -18.6836 c-33.8018 -19.6934 -31.3672 -20.7236 -28.8564 -21.543 C-29.0596 -28.2471 -28.8701 -34.9443 -28.3154 -41.7227 C-24.8789 -42.6826 -21.4043 -43.5371 -17.8877 -44.165 C-13.9775 -38.4775 -10.46 -32.4746 -7.39258 -26.4863 C-4.76465 -26.7383 -2.13672 -27.0303 0.503906 -27.084 C3.14258 -27.2402 5.78516 -27.1514 8.42383 -27.1123 C10.6611 -33.3271 13.2832 -39.6348 16.2559 -45.6973 C19.8135 -45.3652 23.3379 -44.8262 26.8496 -44.2119 C28.3945 -37.3701 29.541 -30.6992 30.2109 -23.8936 C32.7734 -23.2539 35.2969 -22.4805 37.7988 -21.6348 c40.2861 -20.7578 42.7764 -19.8633 45.1865 -18.7861 C49.5361 -23.8438 54.2197 -28.7344 59.1787 -33.3281 C62.3906 -31.7637 65.4961 -29.9785 68.541 -28.1123 C67.5771 -21.2412 66.1797 -14.5146 64.3672 -7.95996 C66.5205 -6.43359 68.6016 -4.80078 70.6182 -3.09961 c72.6504 -1.41211 74.583 0.388672 76.4805 2.22461 C82.3613 -0.902344 88.4688 -3.72461 94.7988 -6.25195 C97.1855 -3.59668 99.457 -0.84668 101.6191 1.99219 C98.166 8.08594 94.5166 13.793 90.4219 19.2734 C91.8936 21.4678 93.2021 23.7617 94.5156 26.0518 C95.7373 28.3916 96.9834 30.7217 98.0361 33.1445 C104.7031 32.3203 111.3604 31.9033 118.1826 31.8203 C119.4473 35.1543 120.6133 38.5322 121.5732 41.9727 C116.2832 46.3857 110.6074 50.4512 104.9453 54.0576 C105.4434 56.6504 105.959 59.2412 106.2715 61.8652 Cf0 D84.2295 64.8047 m82.9346 55.0137 79.792 45.4492 75.0244 36.7559 c70.2598 28.0605 63.8574 20.2695 56.292 13.9092 c48.7275 7.53906 39.9971 2.62012 30.624 -0.586914 c21.2334 -3.8418 11.2285 -5.23633 1.38086 -4.86328 c-8.48438 -4.48047 -18.2813 -2.24023 -27.3701 1.70898 c-36.4658 5.63965 -44.8213 11.3027 -51.8604 18.2598 c-58.9082 25.2109 -64.626 33.4551 -68.6641 42.4746 c-72.7246 51.4707 -75.1152 61.3545 -75.6133 71.2129 c-76.1426 81.0801 -74.8223 91.0254 -71.7295 100.4297 c-68.6475 109.834 -63.8027 118.6895 -57.5078 126.3418 c-51.2266 134.0068 -43.5371 140.4766 -34.9365 145.3252 c-26.3477 150.1553 -16.8096 153.4863 -6.9707 154.8818 c2.83203 156.3115 12.8457 155.9248 22.4854 153.7148 c32.1211 151.5137 41.375 147.5088 49.5869 141.9512 c57.7998 136.3965 64.9648 129.3242 70.5908 121.208 c76.2285 113.0918 80.3135 103.9443 82.6816 94.2803 c84.9902 84.6035 85.5361 74.5986 84.2295 64.8047 cf*UUu*u1 D290.3428 351.0186 m290.4463 351.6934 290.4902 352.376 290.5371 353.0566 C292.1963 353.4834 293.8809 354.0068 295.5098 354.627 C295.5137 355.5518 295.4561 356.4741 295.3789 357.3936 C293.6621 357.9575 291.9629 358.4092 290.2285 358.7422 C290.1338 359.4185 289.9727 360.082 289.832 360.75 C289.6514 361.4082 289.4922 362.0728 289.2676 362.7178 C290.6836 363.7202 292.0371 364.8022 293.3477 365.9712 C293.0137 366.8306 292.6465 367.6807 292.2285 368.5039 C290.4414 368.4238 288.666 368.2197 286.9434 367.9155 C286.5908 368.4995 286.2402 369.0869 285.8398 369.6396 C285.458 370.2061 285.0332 370.7412 284.6123 371.2788 C285.5488 372.7109 286.4355 374.2271 287.2285 375.7896 C286.6045 376.4707 285.9453 377.1162 285.2705 377.7461 C283.6172 377 282.0605 376.1958 280.5527 375.272 C280.0254 375.7046 279.4629 376.0933 278.9063 376.4873 C278.333 376.8589 277.7617 377.2314 277.1641 377.5625 C277.5352 379.2612 277.7969 380.9585 277.9844 382.7178 C277.1543 383.1206 276.3135 383.5005 275.4521 383.8311 C274.1875 382.5684 273.0098 381.2153 271.9434 379.8359 C271.29 380.0347 270.6328 380.2197 269.9668 380.3682 c269.3018 380.5215 268.6309 380.6509 267.9551 380.7476 C267.6855 382.4497 267.3203 384.1626 266.8535 385.8472 C265.9336 385.939 265.0078 385.9688 264.0859 385.9717 C263.3633 384.3286 262.7578 382.6602 262.2656 380.9717 C261.584 380.9346 260.9053 380.8462 260.2295 380.7539 c259.5547 380.6533 258.8828 380.5327 258.2178 380.377 C257.3467 381.8857 256.3984 383.3105 255.3516 384.7393 C254.4697 384.4766 253.5898 384.1978 252.7324 383.8569 C252.6455 382.0776 252.6895 380.2749 252.8271 378.5435 C252.2158 378.2412 251.5977 377.9492 251.0098 377.6016 C250.4082 377.2773 249.8379 376.8999 249.2637 376.5317 C247.9277 377.5942 246.4912 378.6279 245.0146 379.5537 C244.2773 378.9976 243.5732 378.3989 242.8848 377.7837 C243.4707 376.0723 244.1328 374.4438 244.9121 372.8594 C244.4316 372.374 243.9932 371.8496 243.5518 371.3291 c243.124 370.7969 242.7061 370.2578 242.3193 369.6948 C240.6621 370.2207 238.998 370.6353 237.2598 370.9854 C236.7852 370.1953 236.3301 369.3926 235.9199 368.5669 C237.0693 367.188 238.2939 365.8975 239.5781 364.7051 C239.3135 364.0752 239.0762 363.4355 238.8633 362.7866 c238.6582 362.1357 238.4492 361.4844 238.3008 360.8179 C236.5732 360.7095 234.8447 360.5029 233.1201 360.1953 C232.9497 359.2881 232.8193 358.3711 232.7402 357.4512 C234.3027 356.5806 235.9209 355.8203 237.5459 355.1738 C237.5391 354.4922 237.5293 353.8076 237.5781 353.127 c237.6074 352.4443 237.6836 351.7666 237.7637 351.0879 C236.2021 350.3613 234.6714 349.542 233.1597 348.6299 C233.3428 347.7275 233.5444 346.8301 233.7993 345.9453 C235.5703 345.7002 237.3594 345.5742 239.1016 345.5537 C239.3398 344.915 239.582 344.2754 239.8691 343.6563 c240.1367 343.0273 240.457 342.4238 240.7754 341.8203 C239.5879 340.585 238.4287 339.2539 237.3691 337.8691 C237.8525 337.082 238.3848 336.3252 238.9355 335.584 C240.6885 336.0029 242.3789 336.5186 244.0254 337.1445 C244.4629 336.6201 244.9453 336.1357 245.4248 335.6504 c245.9102 335.1709 246.4141 334.71 246.9375 334.2705 C246.2656 332.6748 245.6943 331.0479 245.1875 329.3506 C245.9316 328.8047 246.6895 328.2803 247.4736 327.7939 C248.9551 328.8203 250.3457 329.9082 251.6563 331.085 C252.2568 330.7607 252.875 330.4717 253.499 330.1943 c254.1289 329.9326 254.7578 329.666 255.4082 329.4551 C255.3555 327.7217 255.4043 325.9902 255.5469 324.2373 C256.4355 323.9893 257.334 323.7686 258.2441 323.6064 C259.2539 325.0762 260.1641 326.6289 260.957 328.1768 C261.6367 328.1113 262.3154 328.0361 262.998 328.0225 C263.6797 327.9814 264.3633 328.0049 265.0459 328.0146 C265.624 326.4082 266.3027 324.7773 267.0703 323.21 C267.9902 323.2959 268.9014 323.4355 269.8096 323.5938 C270.209 325.3623 270.5059 327.0879 270.6777 328.8467 C271.3408 329.0127 271.9932 329.2119 272.6406 329.4307 c273.2832 329.6572 273.9277 329.8887 274.5508 330.167 C275.6748 328.8594 276.8848 327.5957 278.168 326.4082 C278.998 326.8125 279.8008 327.2734 280.5879 327.7559 C280.3389 329.5322 279.9775 331.2715 279.5088 332.9658 C280.0654 333.3613 280.6035 333.7832 281.125 334.2227 c281.6504 334.6592 282.1504 335.125 282.6406 335.5996 C284.1611 334.791 285.7402 334.0615 287.377 333.4082 C287.9941 334.0947 288.5801 334.8057 289.1396 335.5391 C288.2471 337.1143 287.3037 338.5898 286.2451 340.0068 C286.625 340.5742 286.9639 341.167 287.3027 341.7598 C287.6191 342.3643 287.9414 342.9668 288.2129 343.5928 C289.9375 343.3799 291.6582 343.2725 293.4219 343.251 C293.749 344.1123 294.0508 344.9863 294.2988 345.875 C292.9316 347.0166 291.4629 348.0674 290 349 C290.1289 349.6699 290.2617 350.3398 290.3428 351.0186 Cf0 D284.6445 351.7783 m284.3086 349.2471 283.4961 346.7744 282.2637 344.5264 c281.0322 342.2783 279.377 340.2646 277.4219 338.6201 c275.4648 336.9736 273.209 335.7012 270.7852 334.8721 c268.3574 334.0313 265.7715 333.6709 263.2246 333.7666 c260.6738 333.8662 258.1416 334.4453 255.792 335.4658 c253.4404 336.4824 251.2803 337.9463 249.4609 339.7451 c247.6387 341.542 246.1602 343.6738 245.1162 346.0049 c244.0664 348.3311 243.4482 350.8867 243.3193 353.4346 c243.1826 355.9863 243.5234 358.5571 244.3242 360.9883 c245.1211 363.4199 246.373 365.709 248 367.6875 c249.624 369.6694 251.6123 371.3418 253.8359 372.5952 c256.0566 373.8442 258.5215 374.7051 261.0664 375.0659 c263.5996 375.4355 266.1895 375.3359 268.6816 374.7646 c271.1719 374.1953 273.5645 373.1602 275.6875 371.7231 c277.8105 370.2871 279.6641 368.4585 281.1182 366.3604 c282.5762 364.2622 283.6309 361.897 284.2441 359.3984 c284.8408 356.897 284.9824 354.3105 284.6445 351.7783 cf*UU167.8154 460.2051 m167.6406 463.6328 L168.8926 464.1318 170.1387 464.6738 171.3789 465.2598 C171.1797 466.7549 170.9238 468.2383 170.498 469.6895 C169.125 469.7578 167.7617 469.7832 166.4102 469.7656 C166.0908 470.8633 165.6445 471.9219 165.2676 473.001 C164.8135 474.0498 164.2852 475.0684 163.7988 476.1035 C164.7695 477.0488 165.707 478.0254 166.6279 479.0439 C165.873 480.3516 165.0557 481.6143 164.1143 482.7939 C162.8203 482.3291 161.5527 481.8301 160.3125 481.2969 C159.5762 482.1709 158.7832 482.999 158.0205 483.8496 C157.168 484.6133 156.3398 485.4072 155.4668 486.1426 C156 487.3838 156.5 488.6514 156.9639 489.9443 C155.7832 490.8867 154.5205 491.7041 153.2139 492.458 C152.1953 491.5371 151.2188 490.5996 150.2725 489.6289 C149.2373 490.1172 148.2197 490.6445 147.1699 491.0977 C146.0918 491.4746 145.0332 491.9219 143.9355 492.2402 C143.9531 493.5918 143.9268 494.9551 143.8594 496.3301 C142.4082 496.7539 140.9238 497.0098 139.4287 497.209 C138.8428 495.9688 138.3008 494.7227 137.8027 493.4717 C134.374 493.6455 L130.9453 493.4717 L130.4473 494.7227 129.9043 495.9688 129.3193 497.209 C127.8242 497.0098 126.3398 496.7539 124.8887 496.3301 C124.8203 494.9551 124.7949 493.5918 124.8125 492.2402 C123.7148 491.9219 122.6563 491.4746 121.5771 491.0977 C120.5283 490.6445 119.5098 490.1172 118.4746 489.6289 C117.5293 490.5996 116.5527 491.5371 115.5332 492.458 C114.2266 491.7031 112.9639 490.8867 111.7852 489.9443 C112.249 488.6514 112.748 487.3838 113.2813 486.1426 C112.4072 485.4063 111.5801 484.6133 110.7275 483.8496 C109.9648 482.999 109.1719 482.1709 108.4355 481.2969 C107.1953 481.8301 105.9277 482.3291 104.6328 482.7939 C103.6924 481.6143 102.875 480.3516 102.1191 479.043 C103.041 478.0254 103.9775 477.0488 104.9492 476.1016 C104.4609 475.0684 103.9346 474.0498 103.4805 473.001 C103.1035 471.9219 102.6563 470.8633 102.3379 469.7656 C100.9863 469.7832 99.623 469.7578 98.249 469.6895 C97.8242 468.2383 97.5684 466.7549 97.3691 465.2588 C98.6094 464.6738 99.8555 464.1318 101.1074 463.6328 C100.9336 460.2051 L101.1074 456.7773 L99.8555 456.2773 98.6094 455.7344 97.3691 455.1494 C97.5684 453.6543 97.8242 452.1699 98.249 450.7197 C99.623 450.6504 100.9863 450.625 102.3379 450.6426 C102.6563 449.5449 103.1035 448.4883 103.4805 447.4082 C103.9346 446.3594 104.4619 445.3398 104.9492 444.3066 C103.9785 443.3604 103.041 442.3828 102.1201 441.3652 C102.875 440.0586 103.6924 438.7949 104.6338 437.6152 C105.9277 438.0791 107.1953 438.5791 108.4355 439.1113 C109.1719 438.2383 109.9648 437.4102 110.7275 436.5586 C111.5801 435.7969 112.4082 435.002 113.2813 434.2656 C112.748 433.0254 112.249 431.7578 111.7852 430.4648 C112.9639 429.5225 114.2275 428.7051 115.5342 427.9512 C116.5527 428.8711 117.5293 429.8086 118.4756 430.7793 C119.5098 430.292 120.5283 429.7637 121.5771 429.3105 C122.6563 428.9336 123.7148 428.4863 124.8125 428.168 C124.7949 426.8164 124.8203 425.4531 124.8896 424.0791 C126.3398 423.6543 127.8242 423.3984 129.3193 423.1992 C129.9043 424.4395 130.4473 425.6855 130.9453 426.9365 C134.374 426.7637 L137.8027 426.9365 L138.3008 425.6855 138.8438 424.4395 139.4287 423.1992 C140.9238 423.3994 142.4082 423.6543 143.8594 424.0791 C143.9268 425.4531 143.9531 426.8164 143.9355 428.168 C145.0332 428.4863 146.0918 428.9336 147.1699 429.3105 C148.2197 429.7637 149.2373 430.292 150.2734 430.7793 C151.2188 429.8086 152.1953 428.8711 153.2139 427.9512 C154.5215 428.7051 155.7832 429.5234 156.9639 430.4648 C156.5 431.7578 156 433.0254 155.4668 434.2656 C156.3398 435.002 157.168 435.7969 158.0205 436.5586 C158.7832 437.4102 159.5762 438.2383 160.3125 439.1113 C161.5527 438.5791 162.8203 438.0791 164.1143 437.6152 C165.0557 438.7949 165.873 440.0586 166.6279 441.3652 C165.707 442.3828 164.7695 443.3604 163.7988 444.3066 C164.2871 445.3418 164.8135 446.3594 165.2676 447.4082 C165.6445 448.4883 166.0908 449.5449 166.4102 450.6426 C167.7617 450.625 169.125 450.6504 170.498 450.7197 C170.9238 452.1699 171.1797 453.6543 171.3789 455.1494 C170.1396 455.7344 168.8926 456.2773 167.6406 456.7773 C167.8154 460.2051 LfLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF